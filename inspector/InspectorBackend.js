// Generated by CoffeeScript 1.6.1
(function() {

  console.log('InspectorBackend.js', window.InspectorFrontendHost);

  document.title = 'bugger';

  window.InspectorBackend = {
    loadFromJSONIfNeeded: function(jsonFile) {
      return console.log('InspectorBackend#loadFromJSONIfNeeded', {
        jsonFile: jsonFile
      });
    },
    registerWorkerDispatcher: function(workerDispatcher) {
      return console.log('InspectorBackend#registerWorkerDispatcher', {
        workerDispatcher: workerDispatcher
      });
    },
    registerConsoleDispatcher: function(consoleDispatcher) {
      return console.log('InspectorBackend#registerConsoleDispatcher', {
        consoleDispatcher: consoleDispatcher
      });
    },
    registerNetworkDispatcher: function(networkDispatcher) {
      return console.log('InspectorBackend#registerNetworkDispatcher', {
        networkDispatcher: networkDispatcher
      });
    },
    registerPageDispatcher: function(pageDispatcher) {
      return console.log('InspectorBackend#registerPageDispatcher', {
        pageDispatcher: pageDispatcher
      });
    },
    registerDebuggerDispatcher: function(debuggerDispatcher) {
      return console.log('InspectorBackend#registerDebuggerDispatcher', {
        debuggerDispatcher: debuggerDispatcher
      });
    },
    registerDOMDispatcher: function(domDispatcher) {
      return console.log('InspectorBackend#registerDOMDispatcher', {
        domDispatcher: domDispatcher
      });
    },
    registerInspectorDispatcher: function(inspector) {
      return console.log('InspectorBackend#registerInspectorDispatcher', {
        inspector: inspector
      });
    },
    registerCSSDispatcher: function(cssDispatcher) {
      return console.log('InspectorBackend#registerCSSDispatcher', {
        cssDispatcher: cssDispatcher
      });
    },
    registerTimelineDispatcher: function(timelineDispatcher) {
      return console.log('InspectorBackend#registerTimelineDispatcher', {
        timelineDispatcher: timelineDispatcher
      });
    },
    registerDatabaseDispatcher: function(databaseDispatcher) {
      return console.log('InspectorBackend#registerDatabaseDispatcher', {
        databaseDispatcher: databaseDispatcher
      });
    },
    registerDOMStorageDispatcher: function(domStorageDispatcher) {
      return console.log('InspectorBackend#registerDOMStorageDispatcher', {
        domStorageDispatcher: domStorageDispatcher
      });
    },
    registerProfilerDispatcher: function(profilerDispatcher) {
      return console.log('InspectorBackend#registerProfilerDispatcher', {
        profilerDispatcher: profilerDispatcher
      });
    }
  };

  window.WorkerAgent = {
    enable: function() {
      return console.log('WorkerAgent#enable');
    }
  };

  window.IndexedDBAgent = {
    enable: function() {
      return console.log('IndexedDBAgent#enable');
    }
  };

  window.DOMAgent = {
    getDocument: function(fn) {
      var domAgentDocument;
      domAgentDocument = document.createElement('html');
      domAgentDocument.nodeId = 'my_nodeId';
      domAgentDocument.innerHTML = '<body><li>Element</li></body>';
      domAgentDocument.baseURL = 'http://localhost:8058';
      console.log('DOMAgent#getDocument', {
        fn: fn
      });
      return fn(null, domAgentDocument);
    },
    resolveNode: function(nodeId, objectGroup, mycallback) {
      return console.log('DOMAgent#resolveNode', {
        nodeId: nodeId,
        objectGroup: objectGroup,
        mycallback: mycallback
      });
    },
    getEventListenersForNode: function(nodeId, objectGroupId, callback) {
      return console.log('DOMAgent#getEventListenersForNode', {
        nodeId: nodeId,
        objectGroupId: objectGroupId,
        callback: callback
      });
    },
    highlightNode: function(highlightConfig, nodeIdUnlessObjectId, objectId) {
      return console.log('DOMAgent#highlightNode', {
        highlightConfig: highlightConfig,
        nodeIdUnlessObjectId: nodeIdUnlessObjectId,
        objectId: objectId
      });
    },
    hideHighlight: function() {
      return console.log('DOMAgent#hideHighlight');
    },
    setInspectModeEnabled: function(enabled, highlightConfig, callback) {
      return console.log('DOMAgent#setInspectModeEnabled', {
        enabled: enabled,
        highlightConfig: highlightConfig,
        callback: callback
      });
    }
  };

  window.DOMStorageAgent = {
    enable: function() {
      return console.log('DOMStorageAgent#enable');
    }
  };

  window.DatabaseAgent = {
    enable: function() {
      return console.log('DatabaseAgent#enable');
    }
  };

  window.ConsoleAgent = {
    enable: function() {
      return console.log('ConsoleAgent#enable');
    },
    addInspectedNode: function(selectedNodeId) {
      return console.log('ConsoleAgent#addInspectedNode', {
        selectedNodeId: selectedNodeId
      });
    }
  };

  window.InspectorAgent = {
    enable: function(showInitialPanel) {
      return console.log('InspectorAgent#enable', {
        showInitialPanel: showInitialPanel
      });
    }
  };

  window.RuntimeAgent = {
    releaseObjectGroup: function(watchObjectGroupId) {
      return console.log('RuntimeAgent#releaseObjectGroup', {
        watchObjectGroupId: watchObjectGroupId
      });
    },
    evaluate: function(expression, objectGroup, includeCommandLineAPI, doNotPauseOnExceptionsAndMuteConsole, currentExecutionContextId, returnByValue, generatePreview, evalCallback) {
      return console.log('RuntimeAgent#evaluate', {
        expression: expression,
        objectGroup: objectGroup,
        includeCommandLineAPI: includeCommandLineAPI,
        doNotPauseOnExceptionsAndMuteConsole: doNotPauseOnExceptionsAndMuteConsole,
        currentExecutionContextId: currentExecutionContextId,
        returnByValue: returnByValue,
        generatePreview: generatePreview,
        evalCallback: evalCallback
      });
    }
  };

  window.NetworkAgent = {
    enable: function() {
      return console.log('NetworkAgent#enable');
    },
    canClearBrowserCache: function(fn) {
      return console.log('NetworkAgent#canClearBrowserCache', {
        fn: fn
      });
    },
    canClearBrowserCookies: function(fn) {
      return console.log('NetworkAgent#canClearBrowserCookies', {
        fn: fn
      });
    }
  };

  window.CSSAgent = {
    getSupportedCSSProperties: function(fn) {
      return console.log('CSSAgent#getSupportedCSSProperties', {
        fn: fn
      });
    },
    enable: function() {
      return console.log('NetworkAgent#enable');
    },
    getAllStyleSheets: function(allStylesCallback) {
      return console.log('CSSAgent#getAllStyleSheets', {
        allStylesCallback: allStylesCallback
      });
    },
    getInlineStylesForNode: function(nodeId, userCallback) {
      return console.log('CSSAgent#getInlineStylesForNode', {
        nodeId: nodeId,
        userCallback: userCallback
      });
    },
    getMatchedStylesForNode: function(nodeId, needPseudo, needInherited, userCallback) {
      return console.log('CSSAgent#getMatchedStylesForNode', {
        nodeId: nodeId,
        needPseudo: needPseudo,
        needInherited: needInherited,
        userCallback: userCallback
      });
    },
    getComputedStyleForNode: function(nodeId, userCallback) {
      return console.log('CSSAgent#getComputedStyleForNode', {
        nodeId: nodeId,
        userCallback: userCallback
      });
    }
  };

  window.DebuggerAgent = {
    causesRecompilation: function(fn) {
      return console.log('DebuggerAgent#causesRecompilation', {
        fn: fn
      });
    },
    supportsSeparateScriptCompilationAndExecution: function(fn) {
      return console.log('DebuggerAgent#supportsSeparateScriptCompilationAndExecution', {
        fn: fn
      });
    },
    canSetScriptSource: function(fn) {
      return console.log('DebuggerAgent#canSetScriptSource', {
        fn: fn
      });
    },
    enable: function(onDebuggerWasEnabled) {
      return console.log('DebuggerAgent#enable', {
        onDebuggerWasEnabled: onDebuggerWasEnabled
      });
    },
    disable: function(onDebuggerWasDisabled) {
      return console.log('DebuggerAgent#disable', {
        onDebuggerWasDisabled: onDebuggerWasDisabled
      });
    }
  };

  window.ProfilerAgent = {
    causesRecompilation: function(fn) {
      return console.log('ProfilerAgent#causesRecompilation', {
        fn: fn
      });
    },
    isSampling: function(fn) {
      return console.log('ProfilerAgent#isSampling', {
        fn: fn
      });
    },
    enable: function(onProfilerWasEnabled) {
      return console.log('ProfilerAgent#enable', {
        onProfilerWasEnabled: onProfilerWasEnabled
      });
    },
    disable: function(onProfilerWasDisabled) {
      return console.log('ProfilerAgent#disable', {
        onProfilerWasDisabled: onProfilerWasDisabled
      });
    }
  };

  window.HeapProfilerAgent = {
    hasHeapProfiler: function(fn) {
      return console.log('HeapProfilerAgent#hasHeapProfiler', {
        fn: fn
      });
    }
  };

  window.TimelineAgent = {
    supportsFrameInstrumentation: function(fn) {
      return console.log('TimelineAgent#supportsFrameInstrumentation', {
        fn: fn
      });
    },
    canMonitorMainThread: function(fn) {
      return console.log('TimelineAgent#canMonitorMainThread', {
        fn: fn
      });
    },
    setIncludeDomCounters: function(includeDomCounters) {
      return console.log('TimelineAgent#setIncludeDomCounters', {
        includeDomCounters: includeDomCounters
      });
    }
  };

  window.PageAgent = {
    canShowDebugBorders: function(fn) {
      return console.log('PageAgent#canShowDebugBorders', {
        fn: fn
      });
    },
    canShowFPSCounter: function(fn) {
      return console.log('PageAgent#canShowFPSCounter', {
        fn: fn
      });
    },
    canContinuouslyPaint: function(fn) {
      return console.log('PageAgent#canContinuouslyPaint', {
        fn: fn
      });
    },
    canOverrideDeviceMetrics: function(fn) {
      return console.log('PageAgent#canOverrideDeviceMetrics', {
        fn: fn
      });
    },
    canOverrideGeolocation: function(fn) {
      return console.log('PageAgent#canOverrideGeolocation', {
        fn: fn
      });
    },
    canOverrideDeviceOrientation: function(fn) {
      return console.log('PageAgent#canOverrideDeviceOrientation', {
        fn: fn
      });
    },
    enable: function() {
      return console.log('PageAgent#enable');
    },
    getResourceTree: function(fn) {
      return console.log('PageAgent#getResourceTree', {
        fn: fn
      });
    },
    setTouchEmulationEnabled: function(emulationEnabled) {
      return console.log('PageAgent#setTouchEmulationEnabled', {
        emulationEnabled: emulationEnabled
      });
    },
    getCookies: function(mycallback) {
      return console.log('PageAgent#getCookies', {
        mycallback: mycallback
      });
    }
  };

}).call(this);
