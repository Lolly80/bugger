// Generated by CoffeeScript 1.6.1
(function() {
  var preloadMessageBuffer;

  WebInspector.settings.debuggerEnabled.set(true);

  window.dumpInspectorProtocolMessages = true;

  WebInspector.inspectedPageURL = location.origin;

  preloadMessageBuffer = [];

  InspectorFrontendHost.sendMessageToBackend = function(message) {
    return preloadMessageBuffer.push(message);
  };

  window.WebInspector.loaded = function() {
    var ws;
    InspectorBackend.loadFromJSONIfNeeded("../Inspector.json");
    WebInspector.dockController = new WebInspector.DockController();
    if (WebInspector.WorkerManager.isDedicatedWorkerFrontend()) {
      return WebInspector.doLoadedDone();
    }
    ws = WebInspector.socket = io.connect("http://" + window.location.host + "/", {
      reconnect: false
    });
    ws.on('message', function(message) {
      if (message) {
        return InspectorBackend.dispatch(message);
      }
    });
    ws.on('error', function(error) {
      return console.error(error);
    });
    ws.on('connect', function() {
      var message, _i, _len;
      for (_i = 0, _len = preloadMessageBuffer.length; _i < _len; _i++) {
        message = preloadMessageBuffer[_i];
        ws.send(message);
      }
      preloadMessageBuffer.length = 0;
      InspectorFrontendHost.sendMessageToBackend = ws.send.bind(ws);
      return WebInspector.doLoadedDone();
    });
    if (InspectorFrontendHost.isStub) {
      InspectorFrontendAPI.dispatchQueryParameters();
      return WebInspector._doLoadedDoneWithCapabilities();
    }
  };

}).call(this);
