// Generated by CoffeeScript 2.0.0-beta4
var config, connectionTimeout, DebugServer, EventEmitter, fs, getSession, handleServerListening, handleWebSocketConnection, Http, io, path, send, serveStaticFiles, Session, session, urlLib;
Http = require('http');
EventEmitter = require('events').EventEmitter;
io = require('socket.io');
send = require('send');
Session = require('./session');
urlLib = require('url');
path = require('path');
fs = require('fs');
session = null;
config = {};
connectionTimeout = null;
serveStaticFiles = function (req, res) {
  var publicDirectory, re, smMatch, sourceMap;
  re = /^\/_sourcemap\/(\d+)$/;
  if (null != (smMatch = req.url.match(re))) {
    res.setHeader('Content-Type', 'application/json');
    sourceMap = getSession().getSourceMap(smMatch[1]);
    if (null != sourceMap.sourcesContent)
      sourceMap.sourcesContent;
    else
      sourceMap.sourcesContent = [];
    sourceMap.sources.forEach(function (source, idx) {
      if (!sourceMap.sourcesContent[idx])
        return sourceMap.sourcesContent[idx] = function () {
          var err;
          try {
            return fs.readFileSync(source).toString();
          } catch (e$) {
            err = e$;
            return '';
          }
        }.call(this);
    });
    return res.end(JSON.stringify(getSession().getSourceMap(smMatch[1])));
  } else {
    publicDirectory = req.url === '/InspectorBackendCommands.js' || req.url === '/InspectorBackend.js' || req.url === '/Overrides.js' ? __dirname : path.join(__dirname, '..', 'public');
    req.url = req.url.replace('/InspectorBackend.js', '/InspectorBackendStub.js');
    return send(req, urlLib.parse(req.url).pathname).root(publicDirectory).pipe(res);
  }
};
getSession = function () {
  if (!session) {
    session = Session.create(config.debugConnection, config);
    session.on('ws_closed', function () {
      return connectionTimeout = setTimeout(function () {
        return session.close();
      }, 3e3);
    });
    session.on('close', function () {
      return session = null;
    });
    session.attach();
  }
  return session;
};
handleWebSocketConnection = function (socket) {
  clearTimeout(connectionTimeout);
  return getSession().join(socket);
};
handleServerListening = function () {
  return console.log('visit http://' + (config.webHost || '0.0.0.0') + ':' + config.webPort + '/inspector.html to start debugging');
};
DebugServer = function (super$) {
  extends$(DebugServer, super$);
  function DebugServer() {
  }
  DebugServer.prototype.start = function (options) {
    var httpServer, ws;
    config = options;
    httpServer = Http.createServer(serveStaticFiles);
    ws = io.listen(httpServer);
    ws.configure(function () {
      ws.set('transports', ['websocket']);
      return ws.set('log level', 1);
    });
    ws.sockets.on('connection', handleWebSocketConnection);
    this.wsServer = ws;
    httpServer.on('listening', handleServerListening);
    httpServer.listen(config.webPort, config.webHost);
    return this;
  };
  DebugServer.prototype.close = function () {
    if (this.wsServer) {
      this.wsServer.close();
      return this.emit('close');
    }
  };
  return DebugServer;
}(EventEmitter);
exports.DebugServer = DebugServer;
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  var key;
  for (key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
