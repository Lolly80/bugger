// Generated by CoffeeScript 1.6.1
var DebugServer, EventEmitter, Http, Session, config, connectionTimeout, getDebuggerPort, getSession, handleServerListening, handleWebSocketConnection, io, path, send, serveStaticFiles, sessions, urlLib,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Http = require('http');

EventEmitter = require('events').EventEmitter;

io = require('socket.io');

send = require('send');

Session = require('./session');

urlLib = require('url');

path = require('path');

sessions = {};

config = {};

connectionTimeout = null;

serveStaticFiles = function(req, res) {
  var re;
  re = /^\/debug/;
  if (re.test(req.url)) {
    config.debugPort = getDebuggerPort(req.url, config.debugPort);
    req.url = req.url.replace(re, '/');
  }
  return send(req, urlLib.parse(req.url).pathname).root(path.join(__dirname, '..', 'public')).pipe(res);
};

getDebuggerPort = function(url, defaultPort) {
  return parseInt((/\?port=(\d+)/.exec(url) || [null, defaultPort])[1], 10);
};

getSession = function(debuggerPort) {
  var session;
  session = sessions[debuggerPort];
  if (!session) {
    session = Session.create(debuggerPort, config);
    sessions[debuggerPort] = session;
    session.on('ws_closed', function() {
      return connectionTimeout = setTimeout(function() {
        return session.close();
      }, 3000);
    });
    session.on('close', function() {
      return sessions[debuggerPort] = null;
    });
    session.attach();
  }
  return session;
};

handleWebSocketConnection = function(socket) {
  clearTimeout(connectionTimeout);
  return getSession(config.debugPort).join(socket);
};

handleServerListening = function() {
  return console.log('visit http://' + (config.webHost || '0.0.0.0') + ':' + config.webPort + '/debug?port=' + config.debugPort + ' to start debugging');
};

DebugServer = (function(_super) {

  __extends(DebugServer, _super);

  function DebugServer() {
    return DebugServer.__super__.constructor.apply(this, arguments);
  }

  DebugServer.prototype.start = function(options) {
    var httpServer, ws;
    config = options;
    httpServer = Http.createServer(serveStaticFiles);
    ws = io.listen(httpServer);
    ws.configure(function() {
      ws.set('transports', ['websocket']);
      return ws.set('log level', 1);
    });
    ws.sockets.on('connection', handleWebSocketConnection);
    this.wsServer = ws;
    httpServer.on('listening', handleServerListening);
    httpServer.listen(config.webPort, config.webHost);
    return this;
  };

  DebugServer.prototype.close = function() {
    if (this.wsServer) {
      this.wsServer.close();
      return this.emit('close');
    }
  };

  return DebugServer;

})(EventEmitter);

exports.DebugServer = DebugServer;
