// Generated by CoffeeScript 1.6.1
(function() {
  var DebugServer, EventEmitter, Http, Session, config, connectionTimeout, fs, getSession, handleServerListening, handleWebSocketConnection, io, path, send, serveStaticFiles, session, urlLib,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Http = require('http');

  EventEmitter = require('events').EventEmitter;

  io = require('socket.io');

  send = require('send');

  Session = require('./session');

  urlLib = require('url');

  path = require('path');

  fs = require('fs');

  session = null;

  config = {};

  connectionTimeout = null;

  serveStaticFiles = function(req, res) {
    var publicDirectory, re, smMatch, sourceMap, _ref, _ref1;
    re = /^\/_sourcemap\/(\d+)$/;
    if ((smMatch = req.url.match(re)) != null) {
      res.setHeader('Content-Type', 'application/json');
      sourceMap = getSession().getSourceMap(smMatch[1]);
      if ((_ref = sourceMap.sourcesContent) == null) {
        sourceMap.sourcesContent = [];
      }
      sourceMap.sources.forEach(function(source, idx) {
        if (!sourceMap.sourcesContent[idx]) {
          return sourceMap.sourcesContent[idx] = (function() {
            try {
              return fs.readFileSync(source).toString();
            } catch (err) {
              return '';
            }
          })();
        }
      });
      return res.end(JSON.stringify(getSession().getSourceMap(smMatch[1])));
    } else {
      publicDirectory = (_ref1 = req.url) === '/InspectorBackendCommands.js' || _ref1 === '/InspectorBackend.js' || _ref1 === '/Overrides.js' ? __dirname : path.join(__dirname, '..', 'public');
      req.url = req.url.replace('/InspectorBackend.js', '/InspectorBackendStub.js');
      return send(req, urlLib.parse(req.url).pathname).root(publicDirectory).pipe(res);
    }
  };

  getSession = function() {
    if (!session) {
      session = Session.create(config.debugConnection, config);
      session.on('ws_closed', function() {
        return connectionTimeout = setTimeout(function() {
          return session.close();
        }, 3000);
      });
      session.on('close', function() {
        return session = null;
      });
      session.attach();
    }
    return session;
  };

  handleWebSocketConnection = function(socket) {
    clearTimeout(connectionTimeout);
    return getSession().join(socket);
  };

  handleServerListening = function() {
    return console.log('visit http://' + (config.webHost || '0.0.0.0') + ':' + config.webPort + '/inspector.html to start debugging');
  };

  DebugServer = (function(_super) {

    __extends(DebugServer, _super);

    function DebugServer() {
      return DebugServer.__super__.constructor.apply(this, arguments);
    }

    DebugServer.prototype.start = function(options) {
      var httpServer, ws;
      config = options;
      httpServer = Http.createServer(serveStaticFiles);
      ws = io.listen(httpServer);
      ws.configure(function() {
        ws.set('transports', ['websocket']);
        return ws.set('log level', 1);
      });
      ws.sockets.on('connection', handleWebSocketConnection);
      this.wsServer = ws;
      httpServer.on('listening', handleServerListening);
      httpServer.listen(config.webPort, config.webHost);
      return this;
    };

    DebugServer.prototype.close = function() {
      if (this.wsServer) {
        this.wsServer.close();
        return this.emit('close');
      }
    };

    return DebugServer;

  })(EventEmitter);

  exports.DebugServer = DebugServer;

}).call(this);
