// Generated by CoffeeScript 1.6.1
var DebugServer, forkChrome, forkScript, resolveModule, run;

resolveModule = require('./bugger').resolveModule;

DebugServer = require('./inspector/server').DebugServer;

forkChrome = require('./forked/chrome');

forkScript = require('./forked/entry_script');

run = function() {
  var argv, argvParser, chrome, debugPort, debugServer, entryScript, scriptProcess;
  argvParser = require('optimist').usage('bugger [OPTIONS] FILE_NAME').options('version', {
    alias: 'v',
    describe: 'Just show version information',
    boolean: true
  }).options('help', {
    alias: 'h',
    describe: 'Show this text',
    boolean: true
  }).options('debug-port', {
    "default": 5858,
    describe: 'Debug port used by node'
  }).options('debug-brk', {
    describe: 'Break on first line of script',
    boolean: true,
    "default": true
  }).options('web-host', {
    "default": '127.0.0.1',
    describe: 'Web host used by node-inspector'
  }).options('web-port', {
    "default": 8058,
    describe: 'Web port used by node-inspector'
  });
  argv = argvParser.argv;
  if (argv.version) {
    console.log(require('./package.json').version);
    process.exit(0);
  }
  if (argv.help) {
    argvParser.showHelp();
    process.exit(0);
  }
  if (!argv._.length) {
    argvParser.showHelp();
    process.exit(1);
  }
  entryScript = resolveModule(argv._[0]);
  if (entryScript == null) {
    throw new Error('File not found: ' + argv._[0]);
  }
  debugPort = argv['debug-port'];
  try {
    chrome = forkChrome(argv['web-host'], argv['web-port'], debugPort);
    chrome.on('exit', process.exit);
    scriptProcess = forkScript(entryScript, debugPort, argv['debug-brk'], argv._);
    scriptProcess.on('exit', process.exit);
    debugServer = (new DebugServer()).start({
      webHost: argv['web-host'],
      webPort: argv['web-port'],
      debugPort: argv['debug-port']
    });
    return process.on('exit', function() {
      try {
        chrome.kill();
      } catch (_error) {}
      try {
        scriptProcess.kill();
      } catch (_error) {}
      try {
        return debugServer.close();
      } catch (_error) {}
    });
  } catch (err) {
    throw err;
  }
};

module.exports = {
  run: run
};
