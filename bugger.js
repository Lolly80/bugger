// Generated by CoffeeScript 2.0.0-beta4
var fs, knownExtensions, path, requireScript, resolveModule;
path = require('path');
fs = require('fs');
knownExtensions = [
  '.js',
  '.coffee'
];
resolveModule = function (fileName) {
  var err, ext, fileStat, withExtension;
  if (fileName[0] !== '/') {
    return resolveModule(path.join(process.cwd(), fileName));
  } else {
    fileName = path.normalize(fileName);
    if (!in$(path.extname(fileName), knownExtensions))
      for (var i$ = 0, length$ = knownExtensions.length; i$ < length$; ++i$) {
        ext = knownExtensions[i$];
        withExtension = resolveModule(fileName + ext);
        if (null != withExtension)
          return withExtension;
      }
    try {
      fileStat = fs.statSync(fileName);
      if (fileStat.isDirectory()) {
        return resolveModule(path.join(fileName, 'index'));
      } else {
        return fileName;
      }
    } catch (e$) {
      err = e$;
      if (!(err.code === 'ENOENT'))
        throw err;
      return null;
    }
  }
};
requireScript = function (fileName, startPaused) {
  var cache$, compile, compileAndBreak, mainModule;
  mainModule = require.main;
  mainModule.filename = process.argv[1] = fs.realpathSync(fileName);
  mainModule.moduleCache && (mainModule.moduleCache = {});
  mainModule.paths = require('module')._nodeModulePaths(path.dirname(fs.realpathSync(fileName)));
  cache$ = require('./coffee-traces');
  compileAndBreak = cache$.compileAndBreak;
  compile = cache$.compile;
  compile = path.extname(fileName) === '.coffee' ? startPaused ? compileAndBreak : compile : function (module, filename) {
    var raw;
    raw = fs.readFileSync(filename, 'utf8');
    if (startPaused)
      raw = "console.error('[bugger] Execution stopped at first line');debugger;\n" + raw;
    return module._compile(raw, filename);
  };
  return compile(mainModule, fileName);
};
module.exports = {
  resolveModule: resolveModule,
  requireScript: requireScript
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
