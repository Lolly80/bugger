// Generated by CoffeeScript 1.6.1
var fs, knownExtensions, path, requireScript, resolveModule,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require('path');

fs = require('fs');

knownExtensions = ['.js', '.coffee'];

resolveModule = function(fileName) {
  var ext, fileStat, withExtension, _i, _len, _ref;
  if (fileName[0] !== '/') {
    return resolveModule(path.join(process.cwd(), fileName));
  } else {
    fileName = path.normalize(fileName);
    if (_ref = path.extname(fileName), __indexOf.call(knownExtensions, _ref) < 0) {
      for (_i = 0, _len = knownExtensions.length; _i < _len; _i++) {
        ext = knownExtensions[_i];
        withExtension = resolveModule(fileName + ext);
        if (withExtension != null) {
          return withExtension;
        }
      }
    }
    try {
      fileStat = fs.statSync(fileName);
      if (fileStat.isDirectory()) {
        return resolveModule(path.join(fileName, 'index'));
      } else {
        return fileName;
      }
    } catch (err) {
      if (err.code !== 'ENOENT') {
        throw err;
      }
      return null;
    }
  }
};

requireScript = function(fileName, startPaused) {
  var compile, compileAndBreak, mainModule, _ref;
  mainModule = require.main;
  mainModule.filename = process.argv[1] = fs.realpathSync(fileName);
  mainModule.moduleCache && (mainModule.moduleCache = {});
  mainModule.paths = require('module')._nodeModulePaths(path.dirname(fs.realpathSync(fileName)));
  _ref = require('./coffee-traces'), compileAndBreak = _ref.compileAndBreak, compile = _ref.compile;
  compile = path.extname(fileName) === '.coffee' ? startPaused ? compileAndBreak : compile : function(module, filename) {
    var raw;
    raw = fs.readFileSync(filename, 'utf8');
    if (startPaused) {
      raw = "console.error('[bugger] Execution stopped at first line');debugger;\n" + raw;
    }
    return module._compile(raw, filename);
  };
  return compile(mainModule, fileName);
};

module.exports = {
  resolveModule: resolveModule,
  requireScript: requireScript
};
