// Generated by CoffeeScript 2.0.0-beta5
var assertObjectGroup, ErrorObjectFromMessage, extend, omit, RemoteObject, safeInObjectGroup;
cache$ = require('lodash');
omit = cache$.omit;
extend = cache$.extend;
cache$1 = require('../remote-object');
RemoteObject = cache$1.RemoteObject;
ErrorObjectFromMessage = cache$1.ErrorObjectFromMessage;
assertObjectGroup = function (objectGroup) {
  var cmd;
  cmd = 'root.__bugger__ || (root.__bugger__ = {});';
  cmd += 'root.__bugger__[' + JSON.stringify(objectGroup) + ']';
  return cmd += ' || (root.__bugger__[' + JSON.stringify(objectGroup) + '] = {});';
};
safeInObjectGroup = function (objectGroup, objectId, expr) {
  var cmd;
  cmd = assertObjectGroup(objectGroup);
  return cmd += 'root.__bugger__[' + JSON.stringify(objectGroup) + '][' + JSON.stringify(objectId) + '] = (' + expr + ');';
};
module.exports = function (debugClient) {
  var lookup;
  lookup = function (options) {
    var fn;
    fn = function (objectId, cb) {
      var reqParams;
      reqParams = {
        handles: [objectId],
        includeSource: false,
        inlineRefs: true
      };
      return debugClient.sendRequest('lookup', reqParams, function (err, objectMap) {
        var body, cache$2, handle, mapper, message, objMap, ref, refs, success;
        cache$2 = response;
        refs = cache$2.refs;
        body = cache$2.body;
        success = cache$2.success;
        message = cache$2.message;
        if (success) {
          objMap = {};
          mapper = mapValue(options)(refs);
          for (handle in body) {
            ref = body[handle];
            objMap[handle] = mapper(ref);
          }
          return cb(null, objMap);
        } else {
          return cb(ErrorObjectFromMessage(options)(refs)(message));
        }
      });
    };
    return fn;
  };
  return lookup;
};
