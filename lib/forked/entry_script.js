// Generated by CoffeeScript 2.0.0-beta4
var commands, MESSAGE_CHILD_EXCEPTION, MESSAGE_CHILD_READY, runningScriptName;
MESSAGE_CHILD_READY = 'CHILD_READY';
MESSAGE_CHILD_EXCEPTION = 'CHILD_EXCEPTION';
runningScriptName = null;
commands = {
  startScript: function (param$) {
    var cache$, debugBrk, entryScript, requireScript;
    {
      cache$ = param$;
      entryScript = cache$.entryScript;
      debugBrk = cache$.debugBrk;
    }
    requireScript = require('../bugger').requireScript;
    runningScriptName = entryScript;
    return requireScript(entryScript, debugBrk === true);
  },
  restartScript: function () {
    var Module, requireScript;
    Module = require('module');
    Module._cache = {};
    Module._sourceMaps = {};
    requireScript = require('../bugger').requireScript;
    return requireScript(runningScriptName, true);
  }
};
if (!(null != module.parent)) {
  process.kill(process.pid, 'SIGUSR1');
  process.on('message', function (message) {
    if (null != commands[message.code]) {
      return commands[message.code](message);
    } else {
      return console.error('[bugger] Unknown message from parent: ' + message.code, message);
    }
  });
  process.on('uncaughtException', function (error) {
    return process.send({
      code: 'uncaughtException',
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack,
        code: error.code,
        meta: error.meta
      }
    });
  });
  process.send({ code: 'childReady' });
}
module.exports = {
  forkEntryScript: function (entryScript, debugPort, debugBrk, argv_, cb) {
    var backChannelHandlers, cache$, entryScriptProc, fork, net, spawn, startupFailedTimeout;
    cache$ = require('child_process');
    spawn = cache$.spawn;
    fork = cache$.fork;
    net = require('net');
    entryScriptProc = fork(module.filename, argv_.splice(1), { silent: false });
    startupFailedTimeout = setTimeout(function () {
      throw new Error('Process for entry script failed to start');
    }, 1e3);
    backChannelHandlers = {
      childReady: function () {
        var debugConnection;
        if (startupFailedTimeout)
          clearTimeout(startupFailedTimeout);
        startupFailedTimeout = true;
        return debugConnection = net.connect(debugPort, function () {
          entryScriptProc.send({
            code: 'startScript',
            entryScript: entryScript,
            debugBrk: debugBrk
          });
          return cb({
            entryScriptProc: entryScriptProc,
            debugConnection: debugConnection
          });
        });
      },
      uncaughtException: function (param$) {
        var error;
        error = param$.error;
        return console.log('Uncaught exception in child:', error);
      }
    };
    return entryScriptProc.on('message', function (message) {
      if (null != backChannelHandlers[message.code]) {
        return backChannelHandlers[message.code](message);
      } else {
        return console.log('[bugger] Unknown message from child: ' + message.code, message);
      }
    });
  }
};
