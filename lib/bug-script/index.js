// Generated by CoffeeScript 2.0.0-beta5
var _resolveFilename, bugScript, connect, createServer, openDebugConnection, path, spawn;
spawn = require('child_process').spawn;
cache$ = require('net');
createServer = cache$.createServer;
connect = cache$.connect;
_resolveFilename = require('module')._resolveFilename;
path = require('path');
openDebugConnection = function (childProcess) {
  var buffer, waitForDebugger;
  buffer = '';
  waitForDebugger = function (chunk) {
    var debugConnection, match;
    buffer += chunk.toString();
    match = buffer.match(/debugger listening/);
    if (null != match) {
      buffer = null;
      childProcess.stderr.removeListener('data', waitForDebugger);
      return debugConnection = connect(childProcess.debugPort, function () {
        childProcess.debugConnection = debugConnection;
        return childProcess.emit('debugConnection', debugConnection);
      });
    }
  };
  return childProcess.stderr.on('data', waitForDebugger);
};
bugScript = function (moduleName, cb) {
  var childArgs, err, numArgs$, tmpServer;
  if ((numArgs$ = arguments.length) > 2) {
    childArgs = [].slice.call(arguments, 1, numArgs$ - 1);
    cb = arguments[numArgs$ - 1];
  } else {
    childArgs = [];
  }
  if (!(moduleName[0] === '/'))
    moduleName = './' + moduleName;
  try {
    moduleName = _resolveFilename(moduleName);
  } catch (e$) {
    err = e$;
    return cb(err);
  }
  tmpServer = createServer(function () {
  });
  return tmpServer.listen(0, function () {
    var debugPort, forked, options;
    debugPort = this.address().port;
    tmpServer.close();
    childArgs = [
      '--debug=' + debugPort,
      path.join(__dirname, 'child.js'),
      moduleName
    ].concat(childArgs);
    options = {
      stdio: [
        'pipe',
        'pipe',
        'pipe',
        'ipc'
      ]
    };
    forked = spawn(process.argv[0], childArgs, options);
    forked.debugPort = debugPort;
    openDebugConnection(forked);
    return cb(null, forked);
  });
};
module.exports = bugScript;
