// Generated by CoffeeScript 2.0.0-beta5
var _resolveFilename, BackChannel, bugScript, connect, createServer, path, spawn;
spawn = require('child_process').spawn;
cache$ = require('net');
createServer = cache$.createServer;
connect = cache$.connect;
_resolveFilename = require('module')._resolveFilename;
path = require('path');
BackChannel = function () {
  function BackChannel(param$) {
    var instance$;
    instance$ = this;
    this.waitForDebugger = function (a) {
      return BackChannel.prototype.waitForDebugger.apply(instance$, arguments);
    };
    this.childProcess = param$;
    this.buffer = '';
    this.connection = null;
    this.childProcess.stderr.on('data', this.waitForDebugger);
  }
  BackChannel.prototype.waitForDebugger = function (chunk) {
    var match, this$;
    this.buffer += chunk.toString();
    match = this.buffer.match(/debugger listening/);
    if (null != match) {
      this.childProcess.stderr.removeListener('data', this.waitForDebugger);
      this.buffer = null;
      return this.childProcess.debugConnection = connect(this.childProcess.debugPort, (this$ = this, function () {
        return this$.childProcess.emit('debugConnection');
      }));
    }
  };
  return BackChannel;
}();
bugScript = function (moduleName, cb) {
  var childArgs, err, numArgs$, tmpServer;
  if ((numArgs$ = arguments.length) > 2) {
    childArgs = [].slice.call(arguments, 1, numArgs$ - 1);
    cb = arguments[numArgs$ - 1];
  } else {
    childArgs = [];
  }
  if (!(moduleName[0] === '/'))
    moduleName = './' + moduleName;
  try {
    moduleName = _resolveFilename(moduleName);
  } catch (e$) {
    err = e$;
    return cb(err);
  }
  tmpServer = createServer(function () {
  });
  return tmpServer.listen(0, function () {
    var debugPort, forked, options;
    debugPort = this.address().port;
    tmpServer.close();
    childArgs = [
      '--debug=' + debugPort,
      path.join(__dirname, 'child.js'),
      moduleName
    ].concat(childArgs);
    options = {
      stdio: [
        'pipe',
        'pipe',
        'pipe',
        'ipc'
      ]
    };
    forked = spawn(process.argv[0], childArgs, options);
    forked.backChannel = new BackChannel(forked);
    forked.debugPort = debugPort;
    return cb(null, forked);
  });
};
module.exports = bugScript;
