// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var Debugger;
  Debugger = new EventEmitter;
  Debugger.causesRecompilation = function (param$, cb) {
    void 0;
  };
  Debugger.supportsSeparateScriptCompilationAndExecution = function (param$, cb) {
    void 0;
  };
  Debugger.enable = function (param$, cb) {
    void 0;
  };
  Debugger.disable = function (param$, cb) {
    void 0;
  };
  Debugger.setBreakpointsActive = function (param$, cb) {
    var active;
    active = param$.active;
  };
  Debugger.setBreakpointByUrl = function (param$, cb) {
    var cache$, columnNumber, condition, lineNumber, url, urlRegex;
    {
      cache$ = param$;
      lineNumber = cache$.lineNumber;
      url = cache$.url;
      urlRegex = cache$.urlRegex;
      columnNumber = cache$.columnNumber;
      condition = cache$.condition;
    }
  };
  Debugger.setBreakpoint = function (param$, cb) {
    var cache$, condition, location;
    {
      cache$ = param$;
      location = cache$.location;
      condition = cache$.condition;
    }
  };
  Debugger.removeBreakpoint = function (param$, cb) {
    var breakpointId;
    breakpointId = param$.breakpointId;
  };
  Debugger.continueToLocation = function (param$, cb) {
    var location;
    location = param$.location;
  };
  Debugger.stepOver = function (param$, cb) {
    void 0;
  };
  Debugger.stepInto = function (param$, cb) {
    void 0;
  };
  Debugger.stepOut = function (param$, cb) {
    void 0;
  };
  Debugger.pause = function (param$, cb) {
    void 0;
  };
  Debugger.resume = function (param$, cb) {
    void 0;
  };
  Debugger.searchInContent = function (param$, cb) {
    var cache$, caseSensitive, isRegex, query, scriptId;
    {
      cache$ = param$;
      scriptId = cache$.scriptId;
      query = cache$.query;
      caseSensitive = cache$.caseSensitive;
      isRegex = cache$.isRegex;
    }
  };
  Debugger.canSetScriptSource = function (param$, cb) {
    void 0;
  };
  Debugger.setScriptSource = function (param$, cb) {
    var cache$, preview, scriptId, scriptSource;
    {
      cache$ = param$;
      scriptId = cache$.scriptId;
      scriptSource = cache$.scriptSource;
      preview = cache$.preview;
    }
  };
  Debugger.restartFrame = function (param$, cb) {
    var callFrameId;
    callFrameId = param$.callFrameId;
  };
  Debugger.getScriptSource = function (param$, cb) {
    var scriptId;
    scriptId = param$.scriptId;
  };
  Debugger.getFunctionDetails = function (param$, cb) {
    var functionId;
    functionId = param$.functionId;
  };
  Debugger.setPauseOnExceptions = function (param$, cb) {
    var state;
    state = param$.state;
  };
  Debugger.evaluateOnCallFrame = function (param$, cb) {
    var cache$, callFrameId, doNotPauseOnExceptionsAndMuteConsole, expression, generatePreview, includeCommandLineAPI, objectGroup, returnByValue;
    {
      cache$ = param$;
      callFrameId = cache$.callFrameId;
      expression = cache$.expression;
      objectGroup = cache$.objectGroup;
      includeCommandLineAPI = cache$.includeCommandLineAPI;
      doNotPauseOnExceptionsAndMuteConsole = cache$.doNotPauseOnExceptionsAndMuteConsole;
      returnByValue = cache$.returnByValue;
      generatePreview = cache$.generatePreview;
    }
  };
  Debugger.compileScript = function (param$, cb) {
    var cache$, expression, sourceURL;
    {
      cache$ = param$;
      expression = cache$.expression;
      sourceURL = cache$.sourceURL;
    }
  };
  Debugger.runScript = function (param$, cb) {
    var cache$, contextId, doNotPauseOnExceptionsAndMuteConsole, objectGroup, scriptId;
    {
      cache$ = param$;
      scriptId = cache$.scriptId;
      contextId = cache$.contextId;
      objectGroup = cache$.objectGroup;
      doNotPauseOnExceptionsAndMuteConsole = cache$.doNotPauseOnExceptionsAndMuteConsole;
    }
  };
  Debugger.setOverlayMessage = function (param$, cb) {
    var message;
    message = param$.message;
  };
  Debugger.setVariableValue = function (param$, cb) {
    var cache$, callFrameId, functionObjectId, newValue, scopeNumber, variableName;
    {
      cache$ = param$;
      scopeNumber = cache$.scopeNumber;
      variableName = cache$.variableName;
      newValue = cache$.newValue;
      callFrameId = cache$.callFrameId;
      functionObjectId = cache$.functionObjectId;
    }
  };
  Debugger.emit_globalObjectCleared = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.globalObjectCleared'
    };
    return this.emit('notification', notification);
  };
  Debugger.emit_scriptParsed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.scriptParsed'
    };
    return this.emit('notification', notification);
  };
  Debugger.emit_scriptFailedToParse = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.scriptFailedToParse'
    };
    return this.emit('notification', notification);
  };
  Debugger.emit_breakpointResolved = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.breakpointResolved'
    };
    return this.emit('notification', notification);
  };
  Debugger.emit_paused = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.paused'
    };
    return this.emit('notification', notification);
  };
  Debugger.emit_resumed = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Debugger.resumed'
    };
    return this.emit('notification', notification);
  };
  Debugger.BreakpointId = {
    id: 'BreakpointId',
    type: 'string',
    description: 'Breakpoint identifier.'
  };
  Debugger.ScriptId = {
    id: 'ScriptId',
    type: 'string',
    description: 'Unique script identifier.'
  };
  Debugger.CallFrameId = {
    id: 'CallFrameId',
    type: 'string',
    description: 'Call frame identifier.'
  };
  Debugger.Location = {
    id: 'Location',
    type: 'object',
    properties: [
      {
        name: 'scriptId',
        $ref: 'ScriptId',
        description: 'Script identifier as reported in the <code>Debugger.scriptParsed</code>.'
      },
      {
        name: 'lineNumber',
        type: 'integer',
        description: 'Line number in the script.'
      },
      {
        name: 'columnNumber',
        type: 'integer',
        optional: true,
        description: 'Column number in the script.'
      }
    ],
    description: 'Location in the source code.'
  };
  Debugger.FunctionDetails = {
    id: 'FunctionDetails',
    hidden: true,
    type: 'object',
    properties: [
      {
        name: 'location',
        $ref: 'Location',
        description: 'Location of the function.'
      },
      {
        name: 'name',
        type: 'string',
        optional: true,
        description: 'Name of the function. Not present for anonymous functions.'
      },
      {
        name: 'displayName',
        type: 'string',
        optional: true,
        description: "Display name of the function(specified in 'displayName' property on the function object)."
      },
      {
        name: 'inferredName',
        type: 'string',
        optional: true,
        description: 'Name of the function inferred from its initial assignment.'
      },
      {
        name: 'scopeChain',
        type: 'array',
        optional: true,
        items: { $ref: 'Scope' },
        description: 'Scope chain for this closure.'
      }
    ],
    description: 'Information about the function.'
  };
  Debugger.CallFrame = {
    id: 'CallFrame',
    type: 'object',
    properties: [
      {
        name: 'callFrameId',
        $ref: 'CallFrameId',
        description: 'Call frame identifier. This identifier is only valid while the virtual machine is paused.'
      },
      {
        name: 'functionName',
        type: 'string',
        description: 'Name of the JavaScript function called on this call frame.'
      },
      {
        name: 'location',
        $ref: 'Location',
        description: 'Location in the source code.'
      },
      {
        name: 'scopeChain',
        type: 'array',
        items: { $ref: 'Scope' },
        description: 'Scope chain for this call frame.'
      },
      {
        name: 'this',
        $ref: 'Runtime.RemoteObject',
        description: '<code>this</code> object for this call frame.'
      }
    ],
    description: 'JavaScript call frame. Array of call frames form the call stack.'
  };
  Debugger.Scope = {
    id: 'Scope',
    type: 'object',
    properties: [
      {
        name: 'type',
        type: 'string',
        'enum': [
          'global',
          'local',
          'with',
          'closure',
          'catch'
        ],
        description: 'Scope type.'
      },
      {
        name: 'object',
        $ref: 'Runtime.RemoteObject',
        description: 'Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.'
      }
    ],
    description: 'Scope description.'
  };
  return Debugger;
};
