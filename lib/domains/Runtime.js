// Generated by CoffeeScript 2.0.0-beta5
var EventEmitter;
EventEmitter = require('events').EventEmitter;
module.exports = function (agentContext) {
  var Runtime;
  Runtime = new EventEmitter;
  Runtime.parse = function (param$, cb) {
    var source;
    source = param$.source;
  };
  Runtime.evaluate = function (param$, cb) {
    var cache$, contextId, doNotPauseOnExceptionsAndMuteConsole, expression, generatePreview, includeCommandLineAPI, objectGroup, returnByValue;
    {
      cache$ = param$;
      expression = cache$.expression;
      objectGroup = cache$.objectGroup;
      includeCommandLineAPI = cache$.includeCommandLineAPI;
      doNotPauseOnExceptionsAndMuteConsole = cache$.doNotPauseOnExceptionsAndMuteConsole;
      contextId = cache$.contextId;
      returnByValue = cache$.returnByValue;
      generatePreview = cache$.generatePreview;
    }
  };
  Runtime.callFunctionOn = function (param$, cb) {
    var $arguments, cache$, doNotPauseOnExceptionsAndMuteConsole, functionDeclaration, generatePreview, objectId, returnByValue;
    {
      cache$ = param$;
      objectId = cache$.objectId;
      functionDeclaration = cache$.functionDeclaration;
      $arguments = cache$.$arguments;
      doNotPauseOnExceptionsAndMuteConsole = cache$.doNotPauseOnExceptionsAndMuteConsole;
      returnByValue = cache$.returnByValue;
      generatePreview = cache$.generatePreview;
    }
  };
  Runtime.getProperties = function (param$, cb) {
    var cache$, objectId, ownProperties;
    {
      cache$ = param$;
      objectId = cache$.objectId;
      ownProperties = cache$.ownProperties;
    }
  };
  Runtime.releaseObject = function (param$, cb) {
    var objectId;
    objectId = param$.objectId;
  };
  Runtime.releaseObjectGroup = function (param$, cb) {
    var objectGroup;
    objectGroup = param$.objectGroup;
  };
  Runtime.run = function (param$, cb) {
    void 0;
  };
  Runtime.enable = function (param$, cb) {
    void 0;
  };
  Runtime.disable = function (param$, cb) {
    void 0;
  };
  Runtime.emit_executionContextCreated = function (params) {
    var notification;
    notification = {
      params: params,
      method: 'Runtime.executionContextCreated'
    };
    return this.emit('notification', notification);
  };
  Runtime.RemoteObjectId = {
    id: 'RemoteObjectId',
    type: 'string',
    description: 'Unique object identifier.'
  };
  Runtime.RemoteObject = {
    id: 'RemoteObject',
    type: 'object',
    description: 'Mirror object referencing original JavaScript object.',
    properties: [
      {
        name: 'type',
        type: 'string',
        'enum': [
          'object',
          'function',
          'undefined',
          'string',
          'number',
          'boolean'
        ],
        description: 'Object type.'
      },
      {
        name: 'subtype',
        type: 'string',
        optional: true,
        'enum': [
          'array',
          'null',
          'node',
          'regexp',
          'date'
        ],
        description: 'Object subtype hint. Specified for <code>object</code> type values only.'
      },
      {
        name: 'className',
        type: 'string',
        optional: true,
        description: 'Object class (constructor) name. Specified for <code>object</code> type values only.'
      },
      {
        name: 'value',
        type: 'any',
        optional: true,
        description: 'Remote object value (in case of primitive values or JSON values if it was requested).'
      },
      {
        name: 'description',
        type: 'string',
        optional: true,
        description: 'String representation of the object.'
      },
      {
        name: 'objectId',
        $ref: 'RemoteObjectId',
        optional: true,
        description: 'Unique object identifier (for non-primitive values).'
      },
      {
        name: 'preview',
        $ref: 'ObjectPreview',
        optional: true,
        description: 'Preview containsing abbreviated property values.',
        hidden: true
      }
    ]
  };
  Runtime.ObjectPreview = {
    id: 'ObjectPreview',
    type: 'object',
    hidden: true,
    description: 'Object containing abbreviated remote object value.',
    properties: [
      {
        name: 'lossless',
        type: 'boolean',
        description: 'Determines whether preview is lossless (contains all information of the original object).'
      },
      {
        name: 'overflow',
        type: 'boolean',
        description: 'True iff some of the properties of the original did not fit.'
      },
      {
        name: 'properties',
        type: 'array',
        items: { $ref: 'PropertyPreview' },
        description: 'List of the properties.'
      }
    ]
  };
  Runtime.PropertyPreview = {
    id: 'PropertyPreview',
    type: 'object',
    hidden: true,
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Property name.'
      },
      {
        name: 'type',
        type: 'string',
        'enum': [
          'object',
          'function',
          'undefined',
          'string',
          'number',
          'boolean'
        ],
        description: 'Object type.'
      },
      {
        name: 'value',
        type: 'string',
        optional: true,
        description: 'User-friendly property value string.'
      },
      {
        name: 'valuePreview',
        $ref: 'ObjectPreview',
        optional: true,
        description: 'Nested value preview.'
      },
      {
        name: 'subtype',
        type: 'string',
        optional: true,
        'enum': [
          'array',
          'null',
          'node',
          'regexp',
          'date'
        ],
        description: 'Object subtype hint. Specified for <code>object</code> type values only.'
      }
    ]
  };
  Runtime.PropertyDescriptor = {
    id: 'PropertyDescriptor',
    type: 'object',
    description: 'Object property descriptor.',
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Property name.'
      },
      {
        name: 'value',
        $ref: 'RemoteObject',
        optional: true,
        description: 'The value associated with the property.'
      },
      {
        name: 'writable',
        type: 'boolean',
        optional: true,
        description: 'True if the value associated with the property may be changed (data descriptors only).'
      },
      {
        name: 'get',
        $ref: 'RemoteObject',
        optional: true,
        description: 'A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).'
      },
      {
        name: 'set',
        $ref: 'RemoteObject',
        optional: true,
        description: 'A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).'
      },
      {
        name: 'configurable',
        type: 'boolean',
        description: 'True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.'
      },
      {
        name: 'enumerable',
        type: 'boolean',
        description: 'True if this property shows up during enumeration of the properties on the corresponding object.'
      },
      {
        name: 'wasThrown',
        type: 'boolean',
        optional: true,
        description: 'True if the result was thrown during the evaluation.'
      },
      {
        name: 'isOwn',
        optional: true,
        type: 'boolean',
        description: 'True if the property is owned for the object.',
        hidden: true
      }
    ]
  };
  Runtime.InternalPropertyDescriptor = {
    id: 'InternalPropertyDescriptor',
    type: 'object',
    description: "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
    properties: [
      {
        name: 'name',
        type: 'string',
        description: 'Conventional property name.'
      },
      {
        name: 'value',
        $ref: 'RemoteObject',
        optional: true,
        description: 'The value associated with the property.'
      }
    ],
    hidden: true
  };
  Runtime.CallArgument = {
    id: 'CallArgument',
    type: 'object',
    description: 'Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.',
    properties: [
      {
        name: 'value',
        type: 'any',
        optional: true,
        description: 'Primitive value.'
      },
      {
        name: 'objectId',
        $ref: 'RemoteObjectId',
        optional: true,
        description: 'Remote object handle.'
      }
    ]
  };
  Runtime.ExecutionContextId = {
    id: 'ExecutionContextId',
    type: 'integer',
    description: 'Id of an execution context.'
  };
  Runtime.ExecutionContextDescription = {
    id: 'ExecutionContextDescription',
    type: 'object',
    description: 'Description of an isolated world.',
    properties: [
      {
        name: 'id',
        $ref: 'ExecutionContextId',
        description: 'Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.'
      },
      {
        name: 'isPageContext',
        type: 'boolean',
        description: 'True if this is a context where inpspected web page scripts run. False if it is a content script isolated context.',
        hidden: true
      },
      {
        name: 'name',
        type: 'string',
        description: 'Human readable name describing given context.',
        hidden: true
      },
      {
        name: 'frameId',
        $ref: 'Network.FrameId',
        description: 'Id of the owning frame.'
      }
    ]
  };
  Runtime.SyntaxErrorType = {
    id: 'SyntaxErrorType',
    type: 'string',
    'enum': [
      'none',
      'irrecoverable',
      'unterminated-literal',
      'recoverable'
    ],
    description: 'Syntax error type: "none" for no error, "irrecoverable" for unrecoverable errors, "unterminated-literal" for when there is an unterminated literal, "recoverable" for when the expression is unfinished but valid so far.'
  };
  Runtime.ErrorRange = {
    id: 'ErrorRange',
    type: 'object',
    description: 'Range of an error in source code.',
    properties: [
      {
        name: 'startOffset',
        type: 'integer',
        description: 'Start offset of range (inclusive).'
      },
      {
        name: 'endOffset',
        type: 'integer',
        description: 'End offset of range (exclusive).'
      }
    ]
  };
  return Runtime;
};
