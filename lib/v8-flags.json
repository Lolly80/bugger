{"boolean":["use_strict","use_strong","strong_mode","strong_this","es_staging","harmony","harmony_shipping","legacy_const","harmony_modules","harmony_array_includes","harmony_regexps","harmony_proxies","harmony_sloppy","harmony_unicode_regexps","harmony_reflect","harmony_destructuring","harmony_sharedarraybuffer","harmony_atomics","harmony_new_target","harmony_tostring","harmony_concat_spreadable","harmony_rest_parameters","harmony_spreadcalls","harmony_spread_arrays","harmony_arrow_functions","harmony_computed_property_names","harmony_unicode","harmony_object","compiled_keyed_generic_loads","pretenuring_call_new","allocation_site_pretenuring","trace_pretenuring","trace_pretenuring_statistics","track_fields","track_double_fields","track_heap_object_fields","track_computed_fields","track_field_types","smi_binop","optimize_for_size","unbox_double_arrays","string_slices","crankshaft","use_gvn","use_canonicalizing","use_inlining","use_escape_analysis","use_allocation_folding","use_local_allocation_folding","use_write_barrier_elimination","loop_invariant_code_motion","fast_math","collect_megamorphic_maps_from_stub_cache","hydrogen_stats","trace_check_elimination","trace_environment_liveness","trace_hydrogen","trace_hydrogen_stubs","trace_inlining","trace_load_elimination","trace_store_elimination","trace_alloc","trace_all_uses","trace_range","trace_gvn","trace_representation","trace_removable_simulates","trace_escape_analysis","trace_allocation_folding","trace_track_allocation_sites","trace_migration","trace_generalization","stress_pointer_maps","stress_environments","print_deopt_stress","trap_on_deopt","trap_on_stub_deopt","deoptimize_uncommon_cases","polymorphic_inlining","use_osr","array_bounds_checks_elimination","trace_bce","array_bounds_checks_hoisting","array_index_dehoisting","analyze_environment_liveness","load_elimination","check_elimination","store_elimination","dead_code_elimination","fold_constants","trace_dead_code_elimination","unreachable_code_elimination","trace_osr","lookup_sample_by_shared","cache_optimized_code","flush_optimized_code_cache","inline_construct","inline_arguments","inline_accessors","optimize_for_in","concurrent_recompilation","trace_concurrent_recompilation","block_concurrent_recompilation","concurrent_osr","omit_map_checks_for_leaf_maps","turbo","turbo_shipping","turbo_greedy_regalloc","trace_turbo","trace_turbo_graph","trace_turbo_types","trace_turbo_scheduler","trace_turbo_reduction","trace_turbo_jt","trace_turbo_ceq","turbo_asm","turbo_asm_deoptimization","turbo_verify","turbo_stats","turbo_splitting","turbo_types","turbo_type_feedback","turbo_allocate","turbo_source_positions","context_specialization","turbo_inlining","trace_turbo_inlining","loop_assignment_analysis","turbo_profiling","turbo_verify_allocation","turbo_move_optimization","turbo_jt","turbo_osr","turbo_try_catch","turbo_try_finally","turbo_stress_loop_peeling","turbo_cf_optimization","turbo_frame_elision","turbo_cache_shared_code","trace_opt_verbose","debug_code","code_comments","enable_sse3","enable_sse4_1","enable_sahf","enable_avx","enable_fma3","enable_bmi1","enable_bmi2","enable_lzcnt","enable_popcnt","enable_vfp3","enable_armv7","enable_armv8","enable_neon","enable_sudiv","enable_mls","enable_movw_movt","enable_unaligned_accesses","enable_32dregs","enable_vldr_imm","force_long_branches","expose_free_buffer","expose_gc","expose_externalize_string","expose_trigger_failure","builtins_in_stack_traces","disable_native_files","inline_new","trace_codegen","trace","mask_constants_with_cookie","lazy","trace_opt","trace_opt_stats","opt","always_opt","always_osr","prepare_always_opt","trace_deopt","trace_stub_failures","serialize_toplevel","serialize_inner","trace_serializer","compilation_cache","cache_prototype_transitions","trace_debug_json","trace_js_array_abuse","trace_external_array_abuse","trace_array_abuse","enable_liveedit","hard_abort","always_inline_smi_code","experimental_new_space_growth_heuristic","gc_global","trace_gc","trace_gc_nvp","trace_gc_ignore_scavenger","trace_idle_notification","trace_idle_notification_verbose","print_cumulative_gc_stat","print_max_heap_committed","trace_gc_verbose","trace_fragmentation","trace_fragmentation_verbose","trace_mutator_utilization","weak_embedded_maps_in_optimized_code","weak_embedded_objects_in_optimized_code","flush_code","trace_code_flushing","age_code","incremental_marking","incremental_marking_steps","overapproximate_weak_closure","concurrent_sweeping","trace_incremental_marking","track_gc_object_stats","trace_gc_object_stats","track_detached_contexts","trace_detached_contexts","heap_profiler_trace_objects","use_idle_notification","use_ic","trace_ic","vector_stores","native_code_counters","always_compact","never_compact","compact_code_space","cleanup_code_caches_at_gc","use_marking_progress_bar","zap_code_space","trace_weak_arrays","track_prototype_users","trace_prototype_users","eliminate_prototype_chain_checks","use_verbose_printer","allow_natives_syntax","trace_parse","trace_sim","debug_sim","check_icache","log_regs_modified","log_colour","ignore_asm_unimplemented_break","trace_sim_messages","stack_trace_on_illegal","abort_on_uncaught_exception","randomize_hashes","profile_deserialization","serialization_statistics","regexp_optimization","testing_bool_flag","profile_hydrogen_code_stub_compilation","predictable","force_marking_deque_overflows","stress_compaction","manual_evacuation_candidates_selection","dump_counters","debugger","log","log_all","log_api","log_code","log_gc","log_handles","log_snapshot_positions","log_suspect","prof","prof_cpp","prof_browser_mode","log_regexp","logfile_per_isolate","ll_prof","perf_basic_prof","log_internal_timer_events","log_timer_events","log_instruction_stats","redirect_code_traces","hydrogen_track_positions","trace_elements_transitions","trace_creation_allocation_sites","print_code_stubs","test_secondary_stub_cache","test_primary_stub_cache","print_code","print_opt_code","print_unopt_code","print_code_verbose","print_builtin_code","sodium","print_all_code"],"names":["use_strict","use_strong","strong_mode","strong_this","es_staging","harmony","harmony_shipping","legacy_const","harmony_modules","harmony_array_includes","harmony_regexps","harmony_proxies","harmony_sloppy","harmony_unicode_regexps","harmony_reflect","harmony_destructuring","harmony_sharedarraybuffer","harmony_atomics","harmony_new_target","harmony_tostring","harmony_concat_spreadable","harmony_rest_parameters","harmony_spreadcalls","harmony_spread_arrays","harmony_arrow_functions","harmony_computed_property_names","harmony_unicode","harmony_object","compiled_keyed_generic_loads","pretenuring_call_new","allocation_site_pretenuring","trace_pretenuring","trace_pretenuring_statistics","track_fields","track_double_fields","track_heap_object_fields","track_computed_fields","track_field_types","smi_binop","optimize_for_size","unbox_double_arrays","string_slices","crankshaft","hydrogen_filter","use_gvn","gvn_iterations","use_canonicalizing","use_inlining","use_escape_analysis","use_allocation_folding","use_local_allocation_folding","use_write_barrier_elimination","max_inlining_levels","max_inlined_source_size","max_inlined_nodes","max_inlined_nodes_cumulative","loop_invariant_code_motion","fast_math","collect_megamorphic_maps_from_stub_cache","hydrogen_stats","trace_check_elimination","trace_environment_liveness","trace_hydrogen","trace_hydrogen_filter","trace_hydrogen_stubs","trace_hydrogen_file","trace_phase","trace_inlining","trace_load_elimination","trace_store_elimination","trace_alloc","trace_all_uses","trace_range","trace_gvn","trace_representation","trace_removable_simulates","trace_escape_analysis","trace_allocation_folding","trace_track_allocation_sites","trace_migration","trace_generalization","stress_pointer_maps","stress_environments","deopt_every_n_times","deopt_every_n_garbage_collections","print_deopt_stress","trap_on_deopt","trap_on_stub_deopt","deoptimize_uncommon_cases","polymorphic_inlining","use_osr","array_bounds_checks_elimination","trace_bce","array_bounds_checks_hoisting","array_index_dehoisting","analyze_environment_liveness","load_elimination","check_elimination","store_elimination","dead_code_elimination","fold_constants","trace_dead_code_elimination","unreachable_code_elimination","trace_osr","stress_runs","lookup_sample_by_shared","cache_optimized_code","flush_optimized_code_cache","inline_construct","inline_arguments","inline_accessors","escape_analysis_iterations","optimize_for_in","concurrent_recompilation","trace_concurrent_recompilation","concurrent_recompilation_queue_length","concurrent_recompilation_delay","block_concurrent_recompilation","concurrent_osr","omit_map_checks_for_leaf_maps","turbo","turbo_shipping","turbo_greedy_regalloc","turbo_filter","trace_turbo","trace_turbo_graph","trace_turbo_cfg_file","trace_turbo_types","trace_turbo_scheduler","trace_turbo_reduction","trace_turbo_jt","trace_turbo_ceq","turbo_asm","turbo_asm_deoptimization","turbo_verify","turbo_stats","turbo_splitting","turbo_types","turbo_type_feedback","turbo_allocate","turbo_source_positions","context_specialization","turbo_inlining","trace_turbo_inlining","loop_assignment_analysis","turbo_profiling","turbo_verify_allocation","turbo_move_optimization","turbo_jt","turbo_osr","turbo_try_catch","turbo_try_finally","turbo_stress_loop_peeling","turbo_cf_optimization","turbo_frame_elision","turbo_cache_shared_code","typed_array_max_size_in_heap","frame_count","interrupt_budget","type_info_threshold","generic_ic_threshold","self_opt_count","trace_opt_verbose","debug_code","code_comments","enable_sse3","enable_sse4_1","enable_sahf","enable_avx","enable_fma3","enable_bmi1","enable_bmi2","enable_lzcnt","enable_popcnt","enable_vfp3","enable_armv7","enable_armv8","enable_neon","enable_sudiv","enable_mls","enable_movw_movt","enable_unaligned_accesses","enable_32dregs","enable_vldr_imm","force_long_branches","mcpu","expose_natives_as","expose_debug_as","expose_free_buffer","expose_gc","expose_gc_as","expose_externalize_string","expose_trigger_failure","stack_trace_limit","builtins_in_stack_traces","disable_native_files","inline_new","trace_codegen","trace","mask_constants_with_cookie","lazy","trace_opt","trace_opt_stats","opt","always_opt","always_osr","prepare_always_opt","trace_deopt","trace_stub_failures","serialize_toplevel","serialize_inner","trace_serializer","min_preparse_length","max_opt_count","compilation_cache","cache_prototype_transitions","cpu_profiler_sampling_interval","trace_debug_json","trace_js_array_abuse","trace_external_array_abuse","trace_array_abuse","enable_liveedit","hard_abort","stack_size","max_stack_trace_source_length","always_inline_smi_code","min_semi_space_size","target_semi_space_size","max_semi_space_size","semi_space_growth_factor","experimental_new_space_growth_heuristic","max_old_space_size","initial_old_space_size","max_executable_size","gc_global","gc_interval","retain_maps_for_n_gc","trace_gc","trace_gc_nvp","trace_gc_ignore_scavenger","trace_idle_notification","trace_idle_notification_verbose","print_cumulative_gc_stat","print_max_heap_committed","trace_gc_verbose","trace_allocation_stack_interval","trace_fragmentation","trace_fragmentation_verbose","trace_mutator_utilization","weak_embedded_maps_in_optimized_code","weak_embedded_objects_in_optimized_code","flush_code","trace_code_flushing","age_code","incremental_marking","incremental_marking_steps","overapproximate_weak_closure","min_progress_during_object_groups_marking","max_object_groups_marking_rounds","concurrent_sweeping","trace_incremental_marking","track_gc_object_stats","trace_gc_object_stats","track_detached_contexts","trace_detached_contexts","histogram_interval","heap_profiler_trace_objects","use_idle_notification","use_ic","trace_ic","vector_stores","native_code_counters","always_compact","never_compact","compact_code_space","cleanup_code_caches_at_gc","use_marking_progress_bar","zap_code_space","random_seed","trace_weak_arrays","track_prototype_users","trace_prototype_users","eliminate_prototype_chain_checks","use_verbose_printer","allow_natives_syntax","trace_parse","trace_sim","debug_sim","check_icache","stop_sim_at","sim_stack_alignment","sim_stack_size","log_regs_modified","log_colour","ignore_asm_unimplemented_break","trace_sim_messages","stack_trace_on_illegal","abort_on_uncaught_exception","randomize_hashes","hash_seed","profile_deserialization","serialization_statistics","regexp_optimization","testing_bool_flag","testing_maybe_bool_flag","testing_int_flag","testing_float_flag","testing_string_flag","testing_prng_seed","testing_serialization_file","startup_blob","profile_hydrogen_code_stub_compilation","predictable","force_marking_deque_overflows","stress_compaction","manual_evacuation_candidates_selection","dump_counters","debugger","log","log_all","log_api","log_code","log_gc","log_handles","log_snapshot_positions","log_suspect","prof","prof_cpp","prof_browser_mode","log_regexp","logfile","logfile_per_isolate","ll_prof","perf_basic_prof","gc_fake_mmap","log_internal_timer_events","log_timer_events","log_instruction_stats","log_instruction_file","log_instruction_period","redirect_code_traces","redirect_code_traces_to","hydrogen_track_positions","trace_elements_transitions","trace_creation_allocation_sites","print_code_stubs","test_secondary_stub_cache","test_primary_stub_cache","print_code","print_opt_code","print_unopt_code","print_code_verbose","print_builtin_code","sodium","print_all_code"],"flags":[{"name":"use_strict","comment":"enforce strict mode","type":"bool","default":false},{"name":"use_strong","comment":"enforce strong mode","type":"bool","default":false},{"name":"strong_mode","comment":"experimental strong language mode","type":"bool","default":false},{"name":"strong_this","comment":"don't allow 'this' to escape from constructors","type":"bool","default":true},{"name":"es_staging","comment":"enable all completed harmony features","type":"bool","default":false},{"name":"harmony","comment":"enable all completed harmony features","type":"bool","default":false},{"name":"harmony_shipping","comment":"enable all shipped harmony fetaures","type":"bool","default":true},{"name":"legacy_const","comment":"legacy semantics for const in sloppy mode","type":"bool","default":true},{"name":"harmony_modules","comment":"enable \"harmony modules\" (in progress)","type":"bool","default":false},{"name":"harmony_array_includes","comment":"enable \"harmony Array.prototype.includes\" (in progress)","type":"bool","default":false},{"name":"harmony_regexps","comment":"enable \"harmony regular expression extensions\" (in progress)","type":"bool","default":false},{"name":"harmony_proxies","comment":"enable \"harmony proxies\" (in progress)","type":"bool","default":false},{"name":"harmony_sloppy","comment":"enable \"harmony features in sloppy mode\" (in progress)","type":"bool","default":false},{"name":"harmony_unicode_regexps","comment":"enable \"harmony unicode regexps\" (in progress)","type":"bool","default":false},{"name":"harmony_reflect","comment":"enable \"harmony Reflect API\" (in progress)","type":"bool","default":false},{"name":"harmony_destructuring","comment":"enable \"harmony destructuring\" (in progress)","type":"bool","default":false},{"name":"harmony_sharedarraybuffer","comment":"enable \"harmony sharedarraybuffer\" (in progress)","type":"bool","default":false},{"name":"harmony_atomics","comment":"enable \"harmony atomics\" (in progress)","type":"bool","default":false},{"name":"harmony_new_target","comment":"enable \"harmony new.target\" (in progress)","type":"bool","default":false},{"name":"harmony_tostring","comment":"enable \"harmony toString\"","type":"bool","default":false},{"name":"harmony_concat_spreadable","comment":"enable \"harmony isConcatSpreadable\"","type":"bool","default":false},{"name":"harmony_rest_parameters","comment":"enable \"harmony rest parameters\"","type":"bool","default":false},{"name":"harmony_spreadcalls","comment":"enable \"harmony spread-calls\"","type":"bool","default":false},{"name":"harmony_spread_arrays","comment":"enable \"harmony spread in array literals\"","type":"bool","default":false},{"name":"harmony_arrow_functions","comment":"enable \"harmony arrow functions\"","type":"bool","default":true},{"name":"harmony_computed_property_names","comment":"enable \"harmony computed property names\"","type":"bool","default":true},{"name":"harmony_unicode","comment":"enable \"harmony unicode escapes\"","type":"bool","default":true},{"name":"harmony_object","comment":"enable \"harmony Object methods\"","type":"bool","default":true},{"name":"compiled_keyed_generic_loads","comment":"use optimizing compiler to generate keyed generic load stubs","type":"bool","default":false},{"name":"pretenuring_call_new","comment":"pretenure call new","type":"bool","default":false},{"name":"allocation_site_pretenuring","comment":"pretenure with allocation sites","type":"bool","default":true},{"name":"trace_pretenuring","comment":"trace pretenuring decisions of HAllocate instructions","type":"bool","default":false},{"name":"trace_pretenuring_statistics","comment":"trace allocation site pretenuring statistics","type":"bool","default":false},{"name":"track_fields","comment":"track fields with only smi values","type":"bool","default":true},{"name":"track_double_fields","comment":"track fields with double values","type":"bool","default":true},{"name":"track_heap_object_fields","comment":"track fields with heap values","type":"bool","default":true},{"name":"track_computed_fields","comment":"track computed boilerplate fields","type":"bool","default":true},{"name":"track_field_types","comment":"track field types","type":"bool","default":true},{"name":"smi_binop","comment":"support smi representation in binary operations","type":"bool","default":true},{"name":"optimize_for_size","comment":"Enables optimizations which favor memory size over execution speed.","type":"bool","default":false},{"name":"unbox_double_arrays","comment":"automatically unbox arrays of doubles","type":"bool","default":true},{"name":"string_slices","comment":"use string slices","type":"bool","default":true},{"name":"crankshaft","comment":"use crankshaft","type":"bool","default":true},{"name":"hydrogen_filter","comment":"optimization filter","type":"string","default":"*"},{"name":"use_gvn","comment":"use hydrogen global value numbering","type":"bool","default":true},{"name":"gvn_iterations","comment":"maximum number of GVN fix-point iterations","type":"int","default":3},{"name":"use_canonicalizing","comment":"use hydrogen instruction canonicalizing","type":"bool","default":true},{"name":"use_inlining","comment":"use function inlining","type":"bool","default":true},{"name":"use_escape_analysis","comment":"use hydrogen escape analysis","type":"bool","default":true},{"name":"use_allocation_folding","comment":"use allocation folding","type":"bool","default":true},{"name":"use_local_allocation_folding","comment":"only fold in basic blocks","type":"bool","default":false},{"name":"use_write_barrier_elimination","comment":"eliminate write barriers targeting allocations in optimized code","type":"bool","default":true},{"name":"max_inlining_levels","comment":"maximum number of inlining levels","type":"int","default":5},{"name":"max_inlined_source_size","comment":"maximum source size in bytes considered for a single inlining","type":"int","default":600},{"name":"max_inlined_nodes","comment":"maximum number of AST nodes considered for a single inlining","type":"int","default":196},{"name":"max_inlined_nodes_cumulative","comment":"maximum cumulative number of AST nodes considered for inlining","type":"int","default":400},{"name":"loop_invariant_code_motion","comment":"loop invariant code motion","type":"bool","default":true},{"name":"fast_math","comment":"faster (but maybe less accurate) math functions","type":"bool","default":true},{"name":"collect_megamorphic_maps_from_stub_cache","comment":"crankshaft harvests type feedback from stub cache","type":"bool","default":true},{"name":"hydrogen_stats","comment":"print statistics for hydrogen","type":"bool","default":false},{"name":"trace_check_elimination","comment":"trace check elimination phase","type":"bool","default":false},{"name":"trace_environment_liveness","comment":"trace liveness of local variable slots","type":"bool","default":false},{"name":"trace_hydrogen","comment":"trace generated hydrogen to file","type":"bool","default":false},{"name":"trace_hydrogen_filter","comment":"hydrogen tracing filter","type":"string","default":"*"},{"name":"trace_hydrogen_stubs","comment":"trace generated hydrogen for stubs","type":"bool","default":false},{"name":"trace_hydrogen_file","comment":"trace hydrogen to given file name","type":"string","default":"NULL"},{"name":"trace_phase","comment":"trace generated IR for specified phases","type":"string","default":"HLZ"},{"name":"trace_inlining","comment":"trace inlining decisions","type":"bool","default":false},{"name":"trace_load_elimination","comment":"trace load elimination","type":"bool","default":false},{"name":"trace_store_elimination","comment":"trace store elimination","type":"bool","default":false},{"name":"trace_alloc","comment":"trace register allocator","type":"bool","default":false},{"name":"trace_all_uses","comment":"trace all use positions","type":"bool","default":false},{"name":"trace_range","comment":"trace range analysis","type":"bool","default":false},{"name":"trace_gvn","comment":"trace global value numbering","type":"bool","default":false},{"name":"trace_representation","comment":"trace representation types","type":"bool","default":false},{"name":"trace_removable_simulates","comment":"trace removable simulates","type":"bool","default":false},{"name":"trace_escape_analysis","comment":"trace hydrogen escape analysis","type":"bool","default":false},{"name":"trace_allocation_folding","comment":"trace allocation folding","type":"bool","default":false},{"name":"trace_track_allocation_sites","comment":"trace the tracking of allocation sites","type":"bool","default":false},{"name":"trace_migration","comment":"trace object migration","type":"bool","default":false},{"name":"trace_generalization","comment":"trace map generalization","type":"bool","default":false},{"name":"stress_pointer_maps","comment":"pointer map for every instruction","type":"bool","default":false},{"name":"stress_environments","comment":"environment for every instruction","type":"bool","default":false},{"name":"deopt_every_n_times","comment":"deoptimize every n times a deopt point is passed","type":"int","default":0},{"name":"deopt_every_n_garbage_collections","comment":"deoptimize every n garbage collections","type":"int","default":0},{"name":"print_deopt_stress","comment":"print number of possible deopt points","type":"bool","default":false},{"name":"trap_on_deopt","comment":"put a break point before deoptimizing","type":"bool","default":false},{"name":"trap_on_stub_deopt","comment":"put a break point before deoptimizing a stub","type":"bool","default":false},{"name":"deoptimize_uncommon_cases","comment":"deoptimize uncommon cases","type":"bool","default":true},{"name":"polymorphic_inlining","comment":"polymorphic inlining","type":"bool","default":true},{"name":"use_osr","comment":"use on-stack replacement","type":"bool","default":true},{"name":"array_bounds_checks_elimination","comment":"perform array bounds checks elimination","type":"bool","default":true},{"name":"trace_bce","comment":"trace array bounds check elimination","type":"bool","default":false},{"name":"array_bounds_checks_hoisting","comment":"perform array bounds checks hoisting","type":"bool","default":false},{"name":"array_index_dehoisting","comment":"perform array index dehoisting","type":"bool","default":true},{"name":"analyze_environment_liveness","comment":"analyze liveness of environment slots and zap dead values","type":"bool","default":true},{"name":"load_elimination","comment":"use load elimination","type":"bool","default":true},{"name":"check_elimination","comment":"use check elimination","type":"bool","default":true},{"name":"store_elimination","comment":"use store elimination","type":"bool","default":false},{"name":"dead_code_elimination","comment":"use dead code elimination","type":"bool","default":true},{"name":"fold_constants","comment":"use constant folding","type":"bool","default":true},{"name":"trace_dead_code_elimination","comment":"trace dead code elimination","type":"bool","default":false},{"name":"unreachable_code_elimination","comment":"eliminate unreachable code","type":"bool","default":true},{"name":"trace_osr","comment":"trace on-stack replacement","type":"bool","default":false},{"name":"stress_runs","comment":"number of stress runs","type":"int","default":0},{"name":"lookup_sample_by_shared","comment":"when picking a function to optimize, watch for shared function info, not JSFunction itself","type":"bool","default":true},{"name":"cache_optimized_code","comment":"cache optimized code for closures","type":"bool","default":true},{"name":"flush_optimized_code_cache","comment":"flushes the cache of optimized code for closures on every GC","type":"bool","default":true},{"name":"inline_construct","comment":"inline constructor calls","type":"bool","default":true},{"name":"inline_arguments","comment":"inline functions with arguments object","type":"bool","default":true},{"name":"inline_accessors","comment":"inline JavaScript accessors","type":"bool","default":true},{"name":"escape_analysis_iterations","comment":"maximum number of escape analysis fix-point iterations","type":"int","default":2},{"name":"optimize_for_in","comment":"optimize functions containing for-in loops","type":"bool","default":true},{"name":"concurrent_recompilation","comment":"optimizing hot functions asynchronously on a separate thread","type":"bool","default":true},{"name":"trace_concurrent_recompilation","comment":"track concurrent recompilation","type":"bool","default":false},{"name":"concurrent_recompilation_queue_length","comment":"the length of the concurrent compilation queue","type":"int","default":8},{"name":"concurrent_recompilation_delay","comment":"artificial compilation delay in ms","type":"int","default":0},{"name":"block_concurrent_recompilation","comment":"block queued jobs until released","type":"bool","default":false},{"name":"concurrent_osr","comment":"concurrent on-stack replacement","type":"bool","default":true},{"name":"omit_map_checks_for_leaf_maps","comment":"do not emit check maps for constant values that have a leaf map, deoptimize the optimized code if the layout of the maps changes.","type":"bool","default":true},{"name":"turbo","comment":"enable TurboFan compiler","type":"bool","default":false},{"name":"turbo_shipping","comment":"enable TurboFan compiler on subset","type":"bool","default":true},{"name":"turbo_greedy_regalloc","comment":"use the greedy register allocator","type":"bool","default":false},{"name":"turbo_filter","comment":"optimization filter for TurboFan compiler","type":"string","default":"~~"},{"name":"trace_turbo","comment":"trace generated TurboFan IR","type":"bool","default":false},{"name":"trace_turbo_graph","comment":"trace generated TurboFan graphs","type":"bool","default":false},{"name":"trace_turbo_cfg_file","comment":"trace turbo cfg graph (for C1 visualizer) to a given file name","type":"string","default":"NULL"},{"name":"trace_turbo_types","comment":"trace TurboFan's types","type":"bool","default":true},{"name":"trace_turbo_scheduler","comment":"trace TurboFan's scheduler","type":"bool","default":false},{"name":"trace_turbo_reduction","comment":"trace TurboFan's various reducers","type":"bool","default":false},{"name":"trace_turbo_jt","comment":"trace TurboFan's jump threading","type":"bool","default":false},{"name":"trace_turbo_ceq","comment":"trace TurboFan's control equivalence","type":"bool","default":false},{"name":"turbo_asm","comment":"enable TurboFan for asm.js code","type":"bool","default":true},{"name":"turbo_asm_deoptimization","comment":"enable deoptimization in TurboFan for asm.js code","type":"bool","default":false},{"name":"turbo_verify","comment":"verify TurboFan graphs at each phase","type":"bool","default":false},{"name":"turbo_stats","comment":"print TurboFan statistics","type":"bool","default":false},{"name":"turbo_splitting","comment":"split nodes during scheduling in TurboFan","type":"bool","default":true},{"name":"turbo_types","comment":"use typed lowering in TurboFan","type":"bool","default":true},{"name":"turbo_type_feedback","comment":"use type feedback in TurboFan","type":"bool","default":false},{"name":"turbo_allocate","comment":"enable inline allocations in TurboFan","type":"bool","default":false},{"name":"turbo_source_positions","comment":"track source code positions when building TurboFan IR","type":"bool","default":false},{"name":"context_specialization","comment":"enable context specialization in TurboFan","type":"bool","default":false},{"name":"turbo_inlining","comment":"enable inlining in TurboFan","type":"bool","default":false},{"name":"trace_turbo_inlining","comment":"trace TurboFan inlining","type":"bool","default":false},{"name":"loop_assignment_analysis","comment":"perform loop assignment analysis","type":"bool","default":true},{"name":"turbo_profiling","comment":"enable profiling in TurboFan","type":"bool","default":false},{"name":"turbo_verify_allocation","comment":"verify register allocation in TurboFan","type":"bool","default":false},{"name":"turbo_move_optimization","comment":"optimize gap moves in TurboFan","type":"bool","default":true},{"name":"turbo_jt","comment":"enable jump threading in TurboFan","type":"bool","default":true},{"name":"turbo_osr","comment":"enable OSR in TurboFan","type":"bool","default":true},{"name":"turbo_try_catch","comment":"enable try-catch support in TurboFan","type":"bool","default":true},{"name":"turbo_try_finally","comment":"enable try-finally support in TurboFan","type":"bool","default":false},{"name":"turbo_stress_loop_peeling","comment":"stress loop peeling optimization","type":"bool","default":false},{"name":"turbo_cf_optimization","comment":"optimize control flow in TurboFan","type":"bool","default":true},{"name":"turbo_frame_elision","comment":"elide frames in TurboFan","type":"bool","default":true},{"name":"turbo_cache_shared_code","comment":"cache context-independent code","type":"bool","default":true},{"name":"typed_array_max_size_in_heap","comment":"threshold for in-heap typed array","type":"int","default":64},{"name":"frame_count","comment":"number of stack frames inspected by the profiler","type":"int","default":1},{"name":"interrupt_budget","comment":"execution budget before interrupt is triggered","type":"int","default":6144},{"name":"type_info_threshold","comment":"percentage of ICs that must have type info to allow optimization","type":"int","default":25},{"name":"generic_ic_threshold","comment":"max percentage of megamorphic/generic ICs to allow optimization","type":"int","default":30},{"name":"self_opt_count","comment":"call count before self-optimization","type":"int","default":130},{"name":"trace_opt_verbose","comment":"extra verbose compilation tracing","type":"bool","default":false},{"name":"debug_code","comment":"generate extra code (assertions) for debugging","type":"bool","default":false},{"name":"code_comments","comment":"emit comments in code disassembly","type":"bool","default":false},{"name":"enable_sse3","comment":"enable use of SSE3 instructions if available","type":"bool","default":true},{"name":"enable_sse4_1","comment":"enable use of SSE4.1 instructions if available","type":"bool","default":true},{"name":"enable_sahf","comment":"enable use of SAHF instruction if available (X64 only)","type":"bool","default":true},{"name":"enable_avx","comment":"enable use of AVX instructions if available","type":"bool","default":true},{"name":"enable_fma3","comment":"enable use of FMA3 instructions if available","type":"bool","default":true},{"name":"enable_bmi1","comment":"enable use of BMI1 instructions if available","type":"bool","default":true},{"name":"enable_bmi2","comment":"enable use of BMI2 instructions if available","type":"bool","default":true},{"name":"enable_lzcnt","comment":"enable use of LZCNT instruction if available","type":"bool","default":true},{"name":"enable_popcnt","comment":"enable use of POPCNT instruction if available","type":"bool","default":true},{"name":"enable_vfp3","comment":"enable use of VFP3 instructions if available","type":"bool","default":true},{"name":"enable_armv7","comment":"enable use of ARMv7 instructions if available (ARM only)","type":"bool","default":true},{"name":"enable_armv8","comment":"enable use of ARMv8 instructions if available (ARM 32-bit only)","type":"bool","default":true},{"name":"enable_neon","comment":"enable use of NEON instructions if available (ARM only)","type":"bool","default":true},{"name":"enable_sudiv","comment":"enable use of SDIV and UDIV instructions if available (ARM only)","type":"bool","default":true},{"name":"enable_mls","comment":"enable use of MLS instructions if available (ARM only)","type":"bool","default":true},{"name":"enable_movw_movt","comment":"enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only)","type":"bool","default":false},{"name":"enable_unaligned_accesses","comment":"enable unaligned accesses for ARMv7 (ARM only)","type":"bool","default":true},{"name":"enable_32dregs","comment":"enable use of d16-d31 registers on ARM - this requires VFP3","type":"bool","default":true},{"name":"enable_vldr_imm","comment":"enable use of constant pools for double immediate (ARM only)","type":"bool","default":false},{"name":"force_long_branches","comment":"force all emitted branches to be in long mode (MIPS/PPC only)","type":"bool","default":false},{"name":"mcpu","comment":"enable optimization for specific cpu","type":"string","default":"auto"},{"name":"expose_natives_as","comment":"expose natives in global object","type":"string","default":"NULL"},{"name":"expose_debug_as","comment":"expose debug in global object","type":"string","default":"NULL"},{"name":"expose_free_buffer","comment":"expose freeBuffer extension","type":"bool","default":false},{"name":"expose_gc","comment":"expose gc extension","type":"bool","default":false},{"name":"expose_gc_as","comment":"expose gc extension under the specified name","type":"string","default":"NULL"},{"name":"expose_externalize_string","comment":"expose externalize string extension","type":"bool","default":false},{"name":"expose_trigger_failure","comment":"expose trigger-failure extension","type":"bool","default":false},{"name":"stack_trace_limit","comment":"number of stack frames to capture","type":"int","default":10},{"name":"builtins_in_stack_traces","comment":"show built-in functions in stack traces","type":"bool","default":false},{"name":"disable_native_files","comment":"disable builtin natives files","type":"bool","default":false},{"name":"inline_new","comment":"use fast inline allocation","type":"bool","default":true},{"name":"trace_codegen","comment":"print name of functions for which code is generated","type":"bool","default":false},{"name":"trace","comment":"trace function calls","type":"bool","default":false},{"name":"mask_constants_with_cookie","comment":"use random jit cookie to mask large constants","type":"bool","default":true},{"name":"lazy","comment":"use lazy compilation","type":"bool","default":true},{"name":"trace_opt","comment":"trace lazy optimization","type":"bool","default":false},{"name":"trace_opt_stats","comment":"trace lazy optimization statistics","type":"bool","default":false},{"name":"opt","comment":"use adaptive optimizations","type":"bool","default":true},{"name":"always_opt","comment":"always try to optimize functions","type":"bool","default":false},{"name":"always_osr","comment":"always try to OSR functions","type":"bool","default":false},{"name":"prepare_always_opt","comment":"prepare for turning on always opt","type":"bool","default":false},{"name":"trace_deopt","comment":"trace optimize function deoptimization","type":"bool","default":false},{"name":"trace_stub_failures","comment":"trace deoptimization of generated code stubs","type":"bool","default":false},{"name":"serialize_toplevel","comment":"enable caching of toplevel scripts","type":"bool","default":true},{"name":"serialize_inner","comment":"enable caching of inner functions","type":"bool","default":true},{"name":"trace_serializer","comment":"print code serializer trace","type":"bool","default":false},{"name":"min_preparse_length","comment":"minimum length for automatic enable preparsing","type":"int","default":1024},{"name":"max_opt_count","comment":"maximum number of optimization attempts before giving up.","type":"int","default":10},{"name":"compilation_cache","comment":"enable compilation cache","type":"bool","default":true},{"name":"cache_prototype_transitions","comment":"cache prototype transitions","type":"bool","default":true},{"name":"cpu_profiler_sampling_interval","comment":"CPU profiler sampling interval in microseconds","type":"int","default":1000},{"name":"trace_debug_json","comment":"trace debugging JSON request/response","type":"bool","default":false},{"name":"trace_js_array_abuse","comment":"trace out-of-bounds accesses to JS arrays","type":"bool","default":false},{"name":"trace_external_array_abuse","comment":"trace out-of-bounds-accesses to external arrays","type":"bool","default":false},{"name":"trace_array_abuse","comment":"trace out-of-bounds accesses to all arrays","type":"bool","default":false},{"name":"enable_liveedit","comment":"enable liveedit experimental feature","type":"bool","default":true},{"name":"hard_abort","comment":"abort by crashing","type":"bool","default":true},{"name":"stack_size","comment":"default size of stack region v8 is allowed to use (in kBytes)","type":"int","default":984},{"name":"max_stack_trace_source_length","comment":"maximum length of function source code printed in a stack trace.","type":"int","default":300},{"name":"always_inline_smi_code","comment":"always inline smi code in non-opt code","type":"bool","default":false},{"name":"min_semi_space_size","comment":"min size of a semi-space (in MBytes), the new space consists of twosemi-spaces","type":"int","default":0},{"name":"target_semi_space_size","comment":"target size of a semi-space (in MBytes) before triggering a GC","type":"int","default":0},{"name":"max_semi_space_size","comment":"max size of a semi-space (in MBytes), the new space consists of twosemi-spaces","type":"int","default":0},{"name":"semi_space_growth_factor","comment":"factor by which to grow the new space","type":"int","default":2},{"name":"experimental_new_space_growth_heuristic","comment":"Grow the new space based on the percentage of survivors instead of their absolute value.","type":"bool","default":false},{"name":"max_old_space_size","comment":"max size of the old space (in Mbytes)","type":"int","default":0},{"name":"initial_old_space_size","comment":"initial old space size (in Mbytes)","type":"int","default":0},{"name":"max_executable_size","comment":"max size of executable memory (in Mbytes)","type":"int","default":0},{"name":"gc_global","comment":"always perform global GCs","type":"bool","default":false},{"name":"gc_interval","comment":"garbage collect after <n> allocations","type":"int","default":-1},{"name":"retain_maps_for_n_gc","comment":"keeps maps alive for <n> old space garbage collections","type":"int","default":2},{"name":"trace_gc","comment":"print one trace line following each garbage collection","type":"bool","default":false},{"name":"trace_gc_nvp","comment":"print one detailed trace line in name=value format after each garbage collection","type":"bool","default":false},{"name":"trace_gc_ignore_scavenger","comment":"do not print trace line after scavenger collection","type":"bool","default":false},{"name":"trace_idle_notification","comment":"print one trace line following each idle notification","type":"bool","default":false},{"name":"trace_idle_notification_verbose","comment":"prints the heap state used by the idle notification","type":"bool","default":false},{"name":"print_cumulative_gc_stat","comment":"print cumulative GC statistics in name=value format on exit","type":"bool","default":false},{"name":"print_max_heap_committed","comment":"print statistics of the maximum memory committed for the heap in name=value format on exit","type":"bool","default":false},{"name":"trace_gc_verbose","comment":"print more details following each garbage collection","type":"bool","default":false},{"name":"trace_allocation_stack_interval","comment":"print stack trace after <n> free-list allocations","type":"int","default":-1},{"name":"trace_fragmentation","comment":"report fragmentation for old space","type":"bool","default":false},{"name":"trace_fragmentation_verbose","comment":"report fragmentation for old space (detailed)","type":"bool","default":false},{"name":"trace_mutator_utilization","comment":"print mutator utilization, allocation speed, gc speed","type":"bool","default":false},{"name":"weak_embedded_maps_in_optimized_code","comment":"make maps embedded in optimized code weak","type":"bool","default":true},{"name":"weak_embedded_objects_in_optimized_code","comment":"make objects embedded in optimized code weak","type":"bool","default":true},{"name":"flush_code","comment":"flush code that we expect not to use again","type":"bool","default":true},{"name":"trace_code_flushing","comment":"trace code flushing progress","type":"bool","default":false},{"name":"age_code","comment":"track un-executed functions to age code and flush only old code (required for code flushing)","type":"bool","default":true},{"name":"incremental_marking","comment":"use incremental marking","type":"bool","default":true},{"name":"incremental_marking_steps","comment":"do incremental marking steps","type":"bool","default":true},{"name":"overapproximate_weak_closure","comment":"overapproximate weak closer to reduce atomic pause time","type":"bool","default":true},{"name":"min_progress_during_object_groups_marking","comment":"keep overapproximating the weak closure as long as we discover at least this many unmarked objects","type":"int","default":128},{"name":"max_object_groups_marking_rounds","comment":"at most try this many times to over approximate the weak closure","type":"int","default":3},{"name":"concurrent_sweeping","comment":"use concurrent sweeping","type":"bool","default":true},{"name":"trace_incremental_marking","comment":"trace progress of the incremental marking","type":"bool","default":false},{"name":"track_gc_object_stats","comment":"track object counts and memory usage","type":"bool","default":false},{"name":"trace_gc_object_stats","comment":"trace object counts and memory usage","type":"bool","default":false},{"name":"track_detached_contexts","comment":"track native contexts that are expected to be garbage collected","type":"bool","default":true},{"name":"trace_detached_contexts","comment":"trace native contexts that are expected to be garbage collected","type":"bool","default":false},{"name":"histogram_interval","comment":"time interval in ms for aggregating memory histograms","type":"int","default":600000},{"name":"heap_profiler_trace_objects","comment":"Dump heap object allocations/movements/size_updates","type":"bool","default":false},{"name":"use_idle_notification","comment":"Use idle notification to reduce memory footprint.","type":"bool","default":true},{"name":"use_ic","comment":"use inline caching","type":"bool","default":true},{"name":"trace_ic","comment":"trace inline cache state transitions","type":"bool","default":false},{"name":"vector_stores","comment":"use vectors for store ics","type":"bool","default":false},{"name":"native_code_counters","comment":"generate extra code for manipulating stats counters","type":"bool","default":false},{"name":"always_compact","comment":"Perform compaction on every full GC","type":"bool","default":false},{"name":"never_compact","comment":"Never perform compaction on full GC - testing only","type":"bool","default":false},{"name":"compact_code_space","comment":"Compact code space on full collections","type":"bool","default":true},{"name":"cleanup_code_caches_at_gc","comment":"Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.","type":"bool","default":true},{"name":"use_marking_progress_bar","comment":"Use a progress bar to scan large objects in increments when incremental marking is active.","type":"bool","default":true},{"name":"zap_code_space","comment":"Zap free memory in code space with 0xCC while sweeping.","type":"bool","default":false},{"name":"random_seed","comment":"Default seed for initializing random generator (0, the default, means to use system random).","type":"int","default":0},{"name":"trace_weak_arrays","comment":"Trace WeakFixedArray usage","type":"bool","default":false},{"name":"track_prototype_users","comment":"Keep track of which maps refer to a given prototype object","type":"bool","default":false},{"name":"trace_prototype_users","comment":"Trace updates to prototype user tracking","type":"bool","default":false},{"name":"eliminate_prototype_chain_checks","comment":"Collapse prototype chain checks into single-cell checks","type":"bool","default":true},{"name":"use_verbose_printer","comment":"allows verbose printing","type":"bool","default":true},{"name":"allow_natives_syntax","comment":"allow natives syntax","type":"bool","default":false},{"name":"trace_parse","comment":"trace parsing and preparsing","type":"bool","default":false},{"name":"trace_sim","comment":"Trace simulator execution","type":"bool","default":false},{"name":"debug_sim","comment":"Enable debugging the simulator","type":"bool","default":false},{"name":"check_icache","comment":"Check icache flushes in ARM and MIPS simulator","type":"bool","default":false},{"name":"stop_sim_at","comment":"Simulator stop after x number of instructions","type":"int","default":0},{"name":"sim_stack_alignment","comment":"Stack alingment in bytes in simulator (4 or 8, 8 is default)","type":"int","default":8},{"name":"sim_stack_size","comment":"Stack size of the ARM64, MIPS64 and PPC64 simulator in kBytes (default is 2 MB)","type":"int","default":2048},{"name":"log_regs_modified","comment":"When logging register values, only print modified registers.","type":"bool","default":true},{"name":"log_colour","comment":"When logging, try to use coloured output.","type":"bool","default":true},{"name":"ignore_asm_unimplemented_break","comment":"Don't break for ASM_UNIMPLEMENTED_BREAK macros.","type":"bool","default":false},{"name":"trace_sim_messages","comment":"Trace simulator debug messages. Implied by --trace-sim.","type":"bool","default":false},{"name":"stack_trace_on_illegal","comment":"print stack trace when an illegal exception is thrown","type":"bool","default":false},{"name":"abort_on_uncaught_exception","comment":"abort program (dump core) when an uncaught exception is thrown","type":"bool","default":false},{"name":"randomize_hashes","comment":"randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed)","type":"bool","default":true},{"name":"hash_seed","comment":"Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed)","type":"int","default":0},{"name":"profile_deserialization","comment":"Print the time it takes to deserialize the snapshot.","type":"bool","default":false},{"name":"serialization_statistics","comment":"Collect statistics on serialized objects.","type":"bool","default":false},{"name":"regexp_optimization","comment":"generate optimized regexp code","type":"bool","default":true},{"name":"testing_bool_flag","comment":"testing_bool_flag","type":"bool","default":true},{"name":"testing_maybe_bool_flag","comment":"testing_maybe_bool_flag","type":"maybe_bool"},{"name":"testing_int_flag","comment":"testing_int_flag","type":"int","default":13},{"name":"testing_float_flag","comment":"float-flag","type":"float","default":2.5},{"name":"testing_string_flag","comment":"string-flag","type":"string","default":"Hello, world!"},{"name":"testing_prng_seed","comment":"Seed used for threading test randomness","type":"int","default":42},{"name":"testing_serialization_file","comment":"file in which to serialize heap","type":"string","default":"/tmp/serdes"},{"name":"startup_blob","comment":"Write V8 startup blob file. (mksnapshot only)","type":"string","default":"NULL"},{"name":"profile_hydrogen_code_stub_compilation","comment":"Print the time it takes to lazily compile hydrogen code stubs.","type":"bool","default":false},{"name":"predictable","comment":"enable predictable mode","type":"bool","default":false},{"name":"force_marking_deque_overflows","comment":"force overflows of marking deque by reducing it's size to 64 words","type":"bool","default":false},{"name":"stress_compaction","comment":"stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows)","type":"bool","default":false},{"name":"manual_evacuation_candidates_selection","comment":"Test mode only flag. It allows an unit test to select evacuation candidates pages (requires --stress_compaction).","type":"bool","default":false},{"name":"dump_counters","comment":"Dump counters on exit","type":"bool","default":false},{"name":"debugger","comment":"Enable JavaScript debugger","type":"bool","default":false},{"name":"log","comment":"Minimal logging (no API, code, GC, suspect, or handles samples).","type":"bool","default":false},{"name":"log_all","comment":"Log all events to the log file.","type":"bool","default":false},{"name":"log_api","comment":"Log API events to the log file.","type":"bool","default":false},{"name":"log_code","comment":"Log code events to the log file without profiling.","type":"bool","default":false},{"name":"log_gc","comment":"Log heap samples on garbage collection for the hp2ps tool.","type":"bool","default":false},{"name":"log_handles","comment":"Log global handle events.","type":"bool","default":false},{"name":"log_snapshot_positions","comment":"log positions of (de)serialized objects in the snapshot.","type":"bool","default":false},{"name":"log_suspect","comment":"Log suspect operations.","type":"bool","default":false},{"name":"prof","comment":"Log statistical profiling information (implies --log-code).","type":"bool","default":false},{"name":"prof_cpp","comment":"Like --prof, but ignore generated code.","type":"bool","default":false},{"name":"prof_browser_mode","comment":"Used with --prof, turns on browser-compatible mode for profiling.","type":"bool","default":true},{"name":"log_regexp","comment":"Log regular expression execution.","type":"bool","default":false},{"name":"logfile","comment":"Specify the name of the log file.","type":"string","default":"v8.log"},{"name":"logfile_per_isolate","comment":"Separate log files for each isolate.","type":"bool","default":true},{"name":"ll_prof","comment":"Enable low-level linux profiler.","type":"bool","default":false},{"name":"perf_basic_prof","comment":"Enable perf linux profiler (basic support).","type":"bool","default":false},{"name":"gc_fake_mmap","comment":"Specify the name of the file for fake gc mmap used in ll_prof","type":"string","default":"/tmp/__v8_gc__"},{"name":"log_internal_timer_events","comment":"Time internal events.","type":"bool","default":false},{"name":"log_timer_events","comment":"Time events including external callbacks.","type":"bool","default":false},{"name":"log_instruction_stats","comment":"Log AArch64 instruction statistics.","type":"bool","default":false},{"name":"log_instruction_file","comment":"AArch64 instruction statistics log file.","type":"string","default":"arm64_inst.csv"},{"name":"log_instruction_period","comment":"AArch64 instruction statistics logging period.","type":"int","default":4194304},{"name":"redirect_code_traces","comment":"output deopt information and disassembly into file code-<pid>-<isolate id>.asm","type":"bool","default":false},{"name":"redirect_code_traces_to","comment":"output deopt information and disassembly into the given file","type":"string","default":"NULL"},{"name":"hydrogen_track_positions","comment":"track source code positions when building IR","type":"bool","default":false},{"name":"trace_elements_transitions","comment":"trace elements transitions","type":"bool","default":false},{"name":"trace_creation_allocation_sites","comment":"trace the creation of allocation sites","type":"bool","default":false},{"name":"print_code_stubs","comment":"print code stubs","type":"bool","default":false},{"name":"test_secondary_stub_cache","comment":"test secondary stub cache by disabling the primary one","type":"bool","default":false},{"name":"test_primary_stub_cache","comment":"test primary stub cache by disabling the secondary one","type":"bool","default":false},{"name":"print_code","comment":"print generated code","type":"bool","default":false},{"name":"print_opt_code","comment":"print optimized code","type":"bool","default":false},{"name":"print_unopt_code","comment":"print unoptimized code before printing optimized code based on it","type":"bool","default":false},{"name":"print_code_verbose","comment":"print more information for code","type":"bool","default":false},{"name":"print_builtin_code","comment":"print generated code for builtins","type":"bool","default":false},{"name":"sodium","comment":"print generated code output suitable for use with the Sodium code viewer","type":"bool","default":false},{"name":"print_all_code","comment":"enable all flags related to printing code","type":"bool","default":false}]}
